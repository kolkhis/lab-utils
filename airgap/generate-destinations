#!/bin/bash
# shellcheck disable=SC2120

# Generate a list of destinations for bastion.sh
# Destination list based on a SSH config file (to be provided separately)

# TODO(feat): Allow use of /etc/hosts (use as default?)


declare SSH_CONFIG_FILE
declare INPUT_FILE
declare OUTPUT_FILE='./destinations.txt'
declare VERBOSE=1
declare -a DESTINATIONS
declare ANSIBLE_INVENTORY=


while [[ -n $1 && $1 =~ ^- && $1 != '--' ]]; do
    case $1 in
        -o|--output-file)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && OUTPUT_FILE=$1; } || {
                err && printf >&2 "The -f/--OUTput-file argument was given but no file specified.\n" && exit 1; } 
            printf "Outputting destinations to the file: %s\n" "$OUTPUT_FILE"
            shift;
            ;;
        -f|--input-file)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && INPUT_FILE=$1; } || {
                err && printf >&2 "The -f/--input-file argument was given but no file specified.\n" && exit 1; } 
            printf "Generating destinations based on the file: %s\n" "$INPUT_FILE"
            shift
            ;;
        -c|--config-file)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && SSH_CONFIG_FILE=$1; } || {
                err && printf >&2 "The -c/--config-file argument was given but no file specified.\n" && exit 1; }
            printf "Using SSH config file: %s\n" "$SSH_CONFIG_FILE"
            shift;
            ;;
        -i|--inventory)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && ANSIBLE_INVENTORY=$1; } || {
                err && printf >&2 "Bad argument to -i/--inventory. Provide a valid .ini format ansible inventory.\n" && exit 1; }
            ;;
        -q|--quiet) VERBOSE=0; shift;
            ;;
        -v|--verbose) VERBOSE=1; shift;
            ;;
        -h|--help)
                cat <<- 'EOF'
		generate-destinations - Generate a destination list file for bastion.sh from various input sources.

		Usage:
		  ./generate-destinations [OPTIONS]

		Options:
		  -c, --config-file FILE	  Path to SSH config file (default: $HOME/.ssh/config)
		  -f, --input-file FILE	   Custom input file (not implemented yet)
		  -i, --inventory FILE		Ansible inventory file (.ini format only, for now)
		  -o, --output-file FILE	  Output file path (default: ./destinations.txt)
		  -v, --verbose			   Enable debug logging 
		  -q, --quiet				 Suppress debug output (default)
		  -h, --help				  Show this help message and exit

		Behavior:
		  - If no arguments are given, the script will default to parsing $HOME/.ssh/config.
		  - If --inventory is given, it takes precedence over SSH config parsing.
		  - Destination output format is:
				<alias> <user@ip>

		Examples:
		  # Use default SSH config and write to destinations.txt
		  ./generate-destinations

		  # Parse a custom SSH config file
		  ./generate-destinations -c ./my_ssh_config

		  # Use an ansible inventory and write to a different file
		  ./generate-destinations -i ./hosts.ini -o ./my-dest.txt

		  # Quiet mode
		  ./generate-destinations --quiet

		EOF
            exit 0;
            ;;
        *)
            err && printf "Unknown argument: %s\n" "$1"
            exit 1;
            ;;
    esac
done
[[ $1 == '--' ]] && shift


debug() {
    (( VERBOSE )) || return 1
    [[ -n $# ]] && printf "[ \033[34mDEBUG\033[0m ]: %s\n" "$*" && return 0
    printf "[ \033[34mDEBUG\033[0m ]: "
}

warn() {
    [[ -n $# ]] && printf "[ \033[33mWARNING\033[0m ]: %s\n" "$*" && return 0
    printf "[ \033[33mWARNING\033[0m ]: "
}

err() {
    [[ -n $# ]] && printf >&2 "[ \032[33mERROR\033[0m ]: %s\n" "$*" && return 0
    printf >&2 "[ \033[32mERROR\033[0m ]: " && return 0
}

parse-ansible-inventory(){
    : "Parse a valid .ini format ansible inventory file to generate destinations.txt"
    [[ -n $ANSIBLE_INVENTORY ]] || return 1
    local -a ENTRIES=()
    IFS=$'\n' read -r -d '' -a ENTRIES < "$ANSIBLE_INVENTORY"
    local entry
    for entry in "${ENTRIES[@]}"; do
        local parsed_ip=
        local parsed_hostname=
        local destination=
        parsed_ip="$(perl -ne 'print $1 if m/\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b/' <<< "$entry")"
        parsed_hostname="$(perl -ne 'print $1 if m/^([^\d][^\s]*)/' <<< "$entry")"
        { 
            [[ -n $parsed_ip && -n $parsed_hostname ]] && destination="$parsed_hostname $parsed_ip"
            [[ -n $destination ]] && DESTINATIONS=("${DESTINATIONS[@]}" "$destination"); 
        } || continue
    done

    debug "Destinations parsed from ansible inventory: $1"
    debug && printf "Destination: %s\n" "${DESTINATIONS[@]}"
}

parse-input-file() {
    : "This function is reserved for extending functionality in the future."
    : "Will allow for a custom input format."
}

parse-ssh-config(){
    # Parse the SSH config file to a "host user@hostname" formatted file 
    # Each line is parsed, validated to have internal IP and SSH-ready

    [[ -z $SSH_CONFIG_FILE || ! -f $SSH_CONFIG_FILE ]] && return 1

    local -a ENTRIES=()
    mapfile -t ENTRIES < <(
        awk '/^Host/ {printf "%s ", $2} /User/ {printf "%s@", $2} /Hostname/ {printf "%s\n", $2}' "$SSH_CONFIG_FILE"
    )

    [[ "${#ENTRIES[@]}" -eq 0 ]] && err "Failed to parse file (parsed input is empty)\n" && return 1

    for n in "${!ENTRIES[@]}"; do
        debug "Entry number $n: ${ENTRIES[$n]}";
        local parsed_destination=
        parsed_destination=$(perl -ne 'print "$1 $2" if m/(\w+)\s*(\w+@\d{3}\.\d{3}\.\d{1,3}\.\d{1,3})/' <<< "${ENTRIES[$n]}")
        [[ -z $parsed_destination ]] && printf "Bad entry, skipping: %s\n" "${ENTRIES[$n]}" && continue
        debug "Parsed entry: $parsed_destination"
        DESTINATIONS=("${DESTINATIONS[@]}" "$parsed_destination")
    done
    return 0
}

output-destinations(){
    printf "%s\n" "${DESTINATIONS[@]}"
}

main() {

    if ! [[ -f ${SSH_CONFIG_FILE:=$HOME/.ssh/config} ]]; then
        err "There is no SSH config file at $SSH_CONFIG_FILE" 
        exit 1
    fi

    if [[ -n $ANSIBLE_INVENTORY ]]; then
        parse-ansible-inventory || {
            err "Failed to parse Ansible inventory file: $ANSIBLE_INVENTORY" && exit 1
        }
    else
        parse-ssh-config || {
            err "Failed to parse SSH config file!" && exit 1
        }
    fi

    output-destinations | sudo tee "$OUTPUT_FILE"
}

main "$@"

