#!/bin/bash

declare -a VMID_LIST
declare -A IP_LIST
declare OUTPUT_FORMAT='ansible'
declare OUTPUT_FILE="./ip-list.txt"

while [[ -n $1 && $1 =~ ^- && ! $1 == '--' ]]; do
    case $1 in
        -f|--format)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && OUTPUT_FORMAT=$1; } || {
                printf >&2 "Bad or missing arguement to: -o | --output-format\n"
            }
            if [[ ! $OUTPUT_FORMAT =~ (ansible|txt) ]]; then
                printf >&2 "Output format should be one of: ansible | txt\n"
                exit 1
            fi
            shift;
            ;;
        -o|--outfile)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && OUTPUT_FILE="$1"; } || {
                printf >&2 "Bad or missing argument to: -f | --file\n" && exit 1
            }
            shift;
            ;;
        *)
            printf "Unknown argument: %s\n" "$1"
            shift;
            ;;
    esac
done

[[ $1 == '--' ]] && shift;

if [[ $EUID -ne 0 ]]; then
    printf >&2 "Script must be run as root.\n"
    exit 1
fi

IFS=$'\n' read -r -d '' -a VMID_LIST < <(
    qm list | perl -ne 'print "$1\n" if m/^\s*(\d{1,})\s/'
)

get-ips(){
    local ip
    local host_name
    for vmid in "${VMID_LIST[@]}"; do
        printf "Attempting to extract IP from vmid: %d\n" "$vmid"
        ip=
        host_name=
        qm guest cmd "$vmid" ping || {
            printf >&2 "Can't connect to VMID: %d\n" "$vmid" && continue
        }

        host_name=$(jq '."host-name"' < <(qm guest cmd "$vmid" get-host-name) | tr -d '"')
        ip=$(jq '.[1]."ip-addresses"[0]."ip-address"' < <(qm guest cmd "$vmid" network-get-interfaces) | tr -d '"') 
        printf "Extracted: %s - %s\n" "$host_name" "$ip"
        IP_LIST[$host_name]="$ip"
    done
}

output-to-file() {
    : > "$OUTPUT_FILE"  # Truncate ip file
    [[ -z "${IP_LIST[*]}" ]] && printf >&2 "IP list is empty!\n" && exit 1
    if [[ ${OUTPUT_FORMAT,,} == 'ansible' ]]; then
        for key in "${!IP_LIST[@]}"; do
            printf "%s ansible_host=%s\n" "$key" "${IP_LIST[$key]}" >> "$OUTPUT_FILE"
        done
    else
        for key in "${!IP_LIST[@]}"; do
            printf "%s %s\n" "$key" "${IP_LIST[$key]}" >> "$OUTPUT_FILE"
        done
    fi
}

get-ips "$@"
output-to-file "$@"

