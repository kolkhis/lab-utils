#!/bin/bash

#===============================================================================
#
#          FILE:  get-vm-ips
#
#         USAGE:  ./get-vm-ips [OPTIONS]
#                 Can be run manually or installed as a daily cron job.
#
#   DESCRIPTION:  Collects IP addresses of online Proxmox VMs using the QEMU 
#                 Guest Agent. Outputs the list in a variety of formats such as
#                 raw host/ip lines, IP-only, or INI Ansible inventory-style.
#
#       OPTIONS:  -f, --format     Output format: ansible | raw | ip
#                 -r, --raw        Alias for '--format raw'
#                 -o, --outfile    Write output to the given file
#                 -c, --cron       Install this script as a daily cron job
#                 -v, --verbose    Enable verbose logging
#                 -q, --quiet      Suppress error messages
#                 -h, --help       Show this help message and exit
#
#  REQUIREMENTS:  bash >= 4.4, Proxmox host with root privileges,
#                 jq, QEMU Guest Agent installed and running in VMs
#
#        AUTHOR:  Connor W. (https://github.com/kolkhis)
#       CREATED:  2025-07-24
#
#===============================================================================

declare -a VMID_LIST
declare -A IP_LIST
declare -l OUTPUT_FORMAT='raw'
declare OUTPUT_FILE
declare VERBOSE=0

debug() {
    [[ $VERBOSE -gt 0 ]] && printf "%s\n" "$*"
}

setup-cron() {
    local cmd
    printf "Setting up script as a cron job...\n"
    if [[ $# -gt 0 ]]; then
        cmd="${BASH_SOURCE[0]} $*"
    else
        cmd="${BASH_SOURCE[0]} -f ansible -o $HOME/generated-hosts.ini"
    fi
    printf "Command to be added to cron:\n\n\t%s\n\n" "$cmd"

    if crontab -l 2>/dev/null | grep -qi "${BASH_SOURCE[0]}"; then
        printf >&2 "Cron job already specified! Use 'crontab -e' and delete the entry before adding a new one.\n"
        return 1
    fi

    printf "Adding cron job...\n"
    { crontab -l 2>/dev/null; printf "* * */1 * * %s\n" "$cmd"; } | crontab - || {
        printf >&2 "[ERROR]: Failed to add cron job!\n"
        return 1
    }
    return 0
}

if [[ $1 =~ ^(-c|--cron) ]]; then
    shift
    setup-cron "$@" || {
        printf >&2 "Failed to set up cron job.\n" && exit 1
    }
    printf "Successfully set up cron job.\n"
    exit 0
fi

while [[ -n $1 && $1 =~ ^- && ! $1 == '--' ]]; do
    case $1 in

        -f|--format)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && OUTPUT_FORMAT=$1; } || {
                printf >&2 "Bad or missing arguement to: -o | --output-format\n";
                exit 1;
            }
            if [[ ! ${OUTPUT_FORMAT} =~ (ansible|txt|ip|raw) ]]; then
                printf >&2 "Output format should be one of: ansible | txt | ip\n"
                exit 1
            fi
            shift;
            ;;

        -r|--raw)
            # Alias for `-f raw` or `--format raw`
            OUTPUT_FORMAT='raw'
            shift;
            ;;

        -o|--outfile)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && OUTPUT_FILE="$1"; } || {
                printf >&2 "Bad or missing argument to: -f | --file\n" && exit 1
            }
            shift;
            ;;

        -v|--verbose)
            VERBOSE=1;
            shift;
            ;;

        -q|--quiet)
            shift;
            exec 2>/dev/null;
            ;;

        -h|--help)
            cat <<- EOF
Usage: ${BASH_SOURCE[0]##*/} [OPTIONS] [--]

Collect IP addresses of running Proxmox VMs using the QEMU Guest Agent,
and write them to a file in a structured format.

OPTIONS:
  -f, --format <fmt>       Output format for the file.
                             Valid formats:
                               - ansible : INI-style Ansible lines (default)
                               - raw     : Plain "<hostname> <ip>" format
                               - ip      : Output only "<ip>" format

  -r, --raw                Alias for '-f raw' or '--format raw'.
                           Outputs in the '<hostname> <ip>' format.  

  -o, --outfile <file>     Destination file path to write output to.
                           Writes to stdout by default.  

  -c, --cron               Install a daily cron job to run this script.
                             The cron job will write to:
                               \$HOME/generated-hosts.ini
                             with 'ansible' format by default.

  -v, --verbose            Enable verbose output. Useful for debugging.

  -q, --quiet              Suppress error messages.

  -h, --help               Display this help message and exit.

NOTES:
  - Script must be run as root.
  - Requires QEMU Guest Agent installed and running in each VM.
  - VMs must be online and accessible via \`qm guest cmd\`.
  - Only the first reported IP per VM is captured.

EXAMPLES:
  ${BASH_SOURCE[0]##*/} -f ansible -o ./myhosts.ini
  ${BASH_SOURCE[0]##*/} --format txt --outfile /tmp/vm-ip-list.txt
  ${BASH_SOURCE[0]##*/} --cron
  ${BASH_SOURCE[0]##*/} --   # use defaults (-f ansible -o ./ip-list.txt)

EOF
            exit 0
            ;;

        *)
            printf "Unknown argument: %s\n" "$1"
            exit 1;
            ;;
    esac
done

[[ $1 == '--' ]] && shift;

if [[ $EUID -ne 0 ]]; then
    printf >&2 "Script must be run as root.\n"
    exit 1
fi

IFS=$'\n' read -r -d '' -a VMID_LIST < <(
    qm list | perl -ne 'print "$1\n" if m/^\s*(\d{1,})\s/'
)

get-ips(){
    local ip
    local host_name
    for vmid in "${VMID_LIST[@]}"; do
        debug "Attempting to extract IP from vmid: $vmid"
        ip=
        host_name=
        qm guest cmd "$vmid" ping > /dev/null 2>&1 || {
            printf >&2 "Can't connect to VMID: %d\n" "$vmid" && continue
        }

        host_name=$(jq -r '."host-name"' < <(qm guest cmd "$vmid" get-host-name))
        ip=$(jq -r '.[1]."ip-addresses"[0]."ip-address"' < <(qm guest cmd "$vmid" network-get-interfaces)) 
        debug "Extracted: $host_name - $ip"
        IP_LIST[$host_name]="$ip"
    done
}

format-output() {
    case "${OUTPUT_FORMAT,,}" in
        ip)
            for key in "${!IP_LIST[@]}"; do
                printf "%s\n" "${IP_LIST[$key]}"
            done
            ;;
        txt|raw)
            for key in "${!IP_LIST[@]}"; do
                printf "%s %s\n" "$key" "${IP_LIST[$key]}"
            done
            ;;
        ansible)
            for key in "${!IP_LIST[@]}"; do
                printf "%s ansible_host=%s\n" "$key" "${IP_LIST[$key]}" >> "$OUTPUT_FILE"
            done
            ;;
        *)
            printf >&2 "Unknown format detected: %s\nExiting." "$OUTPUT_FORMAT"
            exit 1
            ;;
    esac
}

output-results() {
    {
        [[ -z $OUTPUT_FILE ]] && format-output; 
    } || {
        : > "$OUTPUT_FILE"; format-output > "$OUTPUT_FILE"; 
    }
}

get-ips "$@"
[[ -z "${IP_LIST[*]}" ]] && printf >&2 "IP list is empty!\n" && exit 1

output-results
