#!/bin/bash

declare -a VMID_LIST
declare -i FAILURE=0
declare -i SUCCESS=0
declare REBOOT=0

while [[ -n $1 && $1 =~ ^- && ! $1 == '--' ]]; do
    case $1 in
        -r|--reboot)
            REBOOT=1
            shift;
            ;;
        -h|--help)
            cat <<-EOF
Usage: ${BASH_SOURCE[0]##*/} [OPTIONS] [--]

Enable the QEMU Guest Agent setting for all VMs on a Proxmox node using the \`qm\` CLI tool.

Options:
  -r, --reboot         Reboot each VM after enabling the guest agent.
                       Without this flag, only the agent setting is applied.

  -h, --help           Show this help message and exit.

Notes:
  - Requires root privileges (sudo) to run \`qm\` commands.
  - VMs that fail to update will be reported.
  - If all VMs fail, the script exits with code 1.

Examples:
  ${BASH_SOURCE[0]##*/}            # Enable agent on all VMs, no reboots
  ${BASH_SOURCE[0]##*/} --reboot   # Enable agent and reboot each VM
  ${BASH_SOURCE[0]##*/} -r         # Short form of --reboot

EOF
            exit 0
            ;;
        *)
            shift;
            ;;
    esac
done

IFS=$'\n' read -r -d '' -a VMID_LIST < <(
    sudo qm list | perl -ne 'print "$1\n" if m/^\s*(\d{1,})\s/'
)

if [[ -z "${VMID_LIST[*]}" ]]; then
    printf >&2 "Error: VMID list is empty. Make sure you're running with root permissions.\n"
    exit 1
fi

for id in "${VMID_LIST[@]}"; do
    printf "Attempting to enable QEMU guest agent for VM: %s\n" "$id"
    { sudo qm set "$id" --agent enabled=1,fstrim_cloned_disks=1 && (( SUCCESS++ )); } || {
        printf >&2 "ERROR: Failed to enable QEMU guest agent for VM with ID %s\n" "$id"
        (( FAILURE++ ))
        continue
    }
done

printf "Finished.\n" 
printf "Succesful: %d\nFailed: %d\n" "$SUCCESS" "$FAILURE"

if [[ "${#VMID_LIST[@]}" -eq $FAILURE ]]; then
    printf >&2 "All units failed. Please make sure the 'qemu-guest-agent' package is installed on all guest hosts and try again.\n"
    exit 1
fi

(( FAILURE=0 )); (( SUCCESS=0 ));

if [[ $REBOOT -gt 0 ]]; then
    printf "Attempting to reboot all VMs...\n"
    for vmid in "${VMID_LIST[@]}"; do
        sudo qm reboot "$vmid" || {
            printf >&2 "Failed to reboot VM with ID: %s\n" "$vmid" &&
            (( FAILURE++ )) && continue
        }
        (( SUCCESS++ ))
    done
    printf "Finished reboot process.\n"
    printf "Successful: %d\nFailed: %d\n" "$SUCCESS" "$FAILURE"
fi

exit 0
