#!/bin/bash
# TODO: finish this
: "${STATE:=}"
: "${PRIORITY:=}"

while [[ $1 =~ ^- ]]; do
    case $1 in
        -p|--priority) 
            if [[ -n $2 ]]; then
                printf "Setting priority: %s\n" "$2"
                PRIORITY=$2
                shift;
            fi
            shift;
            ;;
        -s|--state)
            if [[ -n $2 ]]; then
                printf "Setting STATE: %s\n" "$2"
                STATE=$2
                shift;
            else
                printf -- "-s specified but no STATE given!\n" && exit 1
            fi
            shift;
            ;;
        -h|--help)
            cat <<- EOF
			Usage: ${0##*/} [OPTIONS]
			
			This script sets up Keepalived for high availability, allowing a node to be
			configured as either MASTER or BACKUP with a specified priority.
			
			Options:
			  -p, --priority <VALUE>   Set the Keepalived priority (1-100).
			  -s, --state <STATE>      Set the Keepalived state (MASTER or BACKUP).
			  -h, --help               Show this help message and exit.
			
			If options are not specified, the script will prompt for STATE and PRIORITY.
			
			Example:
			  ${0##*/} --state MASTER --priority 100
			
			EOF
            exit 0
            ;;
        *)
            printf "Unknown argument: %s\n" "$1" && exit 1
            ;;
    esac
done

# Get state and priority if options were net specified
[[ -z $STATE ]] && read -r -p "Enter the desired STATE (MASTER/BACKUP): " STATE
[[ -z $PRIORITY ]] && read -r -p "Enter the desired PRIORITY (0-100): " PRIORITY

# debug variables
cat << EOF
Setting up Keepalived for $(hostname) - $(hostname -I | awk '{print $1}')
STATE: ${STATE:?"ERROR: STATE must be set to either BACKUP or MASTER!"}
PRIORITY: ${PRIORITY:?"ERROR: PRIORITY must be set to 1-100!"}
EOF


install-keepalived-debian() {
    if ! sudo apt update && sudo apt-get install keepalived -y ; then
        printf "Failed to install keepalived.\n" && return 1
    fi
    return 0
}

install-keepalived-rhel() {
    if ! sudo dnf install keepalived -y; then
        printf "Failed to install keepalived via dnf.\n" && return 1
    fi
    return 0
}


OS_FAMILY=$(grep -i 'id_like' /etc/*release | awk -F= '{print $2}')
if [[ -z $OS_FAMILY ]]; then
    {
        which dnf && printf "dnf found, installing using OS family: %s\n" "${OS_FAMILY:=rhel}"
    } || {
        which apt && printf "Apt found, installing using OS family: %s\n" "${OS_FAMILY:=debian}"
    }
    :
fi

if [[ $OS_FAMILY == *rhel* ]]; then
    install-keepalived-rhel || {
        printf "Failed to install keepalived!\n" && exit 1
    }
    exit 0
fi

if [[ $OS_FAMILY == *debian* ]]; then
    install-keepalived-debian || {
        printf "Failed to install keepalived!\n" && exit 1
    }
    exit 0
fi

