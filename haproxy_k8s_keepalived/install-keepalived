#!/bin/bash
# TODO: finish this
: "${STATE:=}"
: "${PRIORITY:=}"


case $HOSTNAME in
    *lb1*)
        printf "Host is load balancer number 1.\n" 
        printf "Setting priority to %s.\n" "${PRIORITY:=100}"
        printf "Setting state to %s.\n" "${STATE:=MASTER}"
        ;;
    *lb2*)
        printf "Host is load balancer number 2.\n"
        printf "Setting priority to: %s.\n" "${PRIORITY:=90}"
        printf "Setting state to: %s.\n" "${STATE:=BACKUP}"
        ;;
    *)
        printf "Couldn't determine what the priority should be based on the hostname.\n"
        ;;
esac


while [[ $1 =~ ^- ]]; do
    case $1 in
        -p|--priority) 
            if [[ -n $2 ]]; then
                printf "Setting priority: %s\n" "$2"
                PRIORITY=$2
                shift;
            fi
            shift;
            ;;
        -s|--state)
            if [[ -n $2 ]]; then
                printf "Setting STATE: %s\n" "$2"
                STATE=$2
                shift;
            else
                printf -- "-s specified but no STATE given!\n" && exit 1
            fi
            shift;
            ;;
        -h|--help)
            cat <<- EOF
			Usage: ${0##*/} [OPTIONS]
			
			This script sets up Keepalived for high availability, allowing a node to be
			configured as either MASTER or BACKUP with a specified priority.
			
			Options:
			  -p, --priority <VALUE>   Set the Keepalived priority (1-100).
			  -s, --state <STATE>      Set the Keepalived state (MASTER or BACKUP).
			  -h, --help               Show this help message and exit.
			
			If options are not specified, the script will prompt for STATE and PRIORITY.
			
			Example:
			  ${0##*/} --state MASTER --priority 100
			
			EOF
            exit 0
            ;;
        *)
            printf "Unknown argument: %s\n" "$1" && exit 1
            ;;
    esac
done

# Get state and priority if options were net specified
[[ -z $STATE ]] && read -r -p "Enter the desired STATE (MASTER/BACKUP): " STATE
[[ -z $PRIORITY ]] && read -r -p "Enter the desired PRIORITY (0-100): " PRIORITY

# debug variables
cat << EOF
Setting up Keepalived for $(hostname) - $(hostname -I | awk '{print $1}')
STATE: ${STATE:?"ERROR: STATE must be set to either BACKUP or MASTER!"}
PRIORITY: ${PRIORITY:?"ERROR: PRIORITY must be set to 1-100!"}
EOF


add-config-file() {
    {
    cat <<- EOF | sudo tee /etc/keepalived/keepalived.conf
	vrrp_instance VI_1 {
	    state ${STATE}            # MASTER on the primary node, BACKUP on the secondary
	    interface ens18         # The network interface connected to the LAN (ip addr)
	    virtual_router_id 51    # needs to be the same on both nodes
	    priority ${PRIORITY}            # Highest priority indicates the active MASTER node
	    advert_int 1            # advertisement interval, in seconds
	    authentication {
	        auth_type PASS
	        auth_pass secretpassword123
	    }
	    virtual_ipaddress {
	        192.168.4.250/24   # adjust to match network
	    }
	}
	EOF
    } || {
        printf "Failed to add config file: /etc/keepalived/keepalived.conf\n" && return 1
    }
}

restart-and-enable() {
    sudo systemctl restart keepalived || {
        printf >&2 'Failed to restart keepalived.\n' && return 1; 
    }

    sudo systemctl enable --now keepalived || {
        printf >&2 'Failed to enable keepalived.\n' && return 1; 
    }
}

install-keepalived-debian() {
    if ! sudo apt update && sudo apt-get install keepalived -y ; then
        printf >&2 "Failed to install keepalived.\n" && return 1
    fi
    add-config-file || {
        printf >&2 "Failed to add keepalived configuration file.\n" && return 1
    }
    restart-and-enable || {
        printf >&2 "Failed to restart and enable keepalived.\n" && return 1
    }
    return 0
}

install-keepalived-rhel() {
    if ! sudo dnf install keepalived -y; then
        printf >&2 "Failed to install keepalived via dnf.\n" && return 1
    fi
    add-config-file || {
        printf >&2 "Failed to add keepalived configuration file.\n" && return 1
    }
    restart-and-enable || {
        printf >&2 "Failed to restart and enable keepalived.\n" && return 1
    }
    return 0
}


OS_FAMILY=$(grep -i 'id_like' /etc/*release | awk -F= '{print $2}')
if [[ -z $OS_FAMILY ]]; then
    {
        which dnf && printf "dnf found, installing using OS family: %s\n" "${OS_FAMILY:=rhel}"
    } || {
        which apt && printf "Apt found, installing using OS family: %s\n" "${OS_FAMILY:=debian}"
    }
    :
fi

if [[ $OS_FAMILY == *rhel* ]]; then
    install-keepalived-rhel || {
        printf >&2 "Failed to install keepalived!\n" && exit 1
    }
    printf "\033[31mSuccessfully installed keepalived.\n\033[0m"
    exit 0
fi

if [[ $OS_FAMILY == *debian* ]]; then
    install-keepalived-debian || {
        printf >&2 "Failed to install keepalived!\n" && exit 1
    }
    printf "\033[32mSuccessfully installed keepalived.\n\033[0m"
    exit 0
fi

