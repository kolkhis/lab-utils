---
 # Run this from the machine hosting Prometheus to correctly
 # append it as a target for Prometheus to scrape.
- name: Install and configure node_exporter
  hosts: all
  vars:
    node_exporter_version: 1.8.2
    node_exporter_platform: "linux-amd64"
    node_exporter_dir: "/opt/node_exporter"
    node_exporter_tarball: "node_exporter-{{ node_exporter_version }}.{{ node_exporter_platform }}.tar.gz"
    node_exporter_extracted_dir: "{{ node_exporter_dir }}/node_exporter-{{ node_exporter_version }}.{{ node_exporter_platform }}"
    github_download_page: https://github.com/prometheus/node_exporter/releases/download
    node_exporter_download_link: |
      {{ github_download_page }}/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.{{ node_exporter_platform }}.tar.gz
    control_node_inventory_name: "localhost"

  tasks:

    - name: Creation, download, and extraction of node_exporter
      become: true
      block:
        - name: Create /opt/node_exporter directory
          ansible.builtin.file:
            path: "{{ node_exporter_dir }}"
            state: directory
            mode: '0755'

        - name: Create /etc/sysconfig directory
          ansible.builtin.file:
            path: /etc/sysconfig
            state: directory
            mode: '0755'

        - name: Download the given version of node_exporter
          ansible.builtin.get_url:
            url: "{{ node_exporter_download_link }}"
            dest: "{{ node_exporter_dir }}"
            mode: '0755'

        - name: Output the download link being used
          ansible.builtin.debug:
            msg: "Downloading node_exporter from: {{ node_exporter_download_link }}"

        - name: Extract node exporter
          ansible.builtin.unarchive:
            remote_src: true
            src: "{{ node_exporter_dir }}/{{ node_exporter_tarball }}"
            dest: "{{ node_exporter_dir }}"

        - name: Create a user account for node_exporter
          ansible.builtin.user:
            name: node_exporter
            shell: /sbin/nologin

        - name: Create /var/lib/node_exporter/textfile_collector
          ansible.builtin.file:
            path: /var/lib/node_exporter/textfile_collector
            state: directory
            owner: node_exporter
            group: node_exporter
            mode: '0755'

      # TODO: Refactor to use basic service file with minimal ExecStart
              # [Unit]
              # Description=Node Exporter Startup
              # Wants=network-online.target
              # After=network-online.target

              # [Service]
              # ExecStart=/opt/node_exporter/node_exporter-1.5.0.linux-amd64/node_exporter

              # [Install]
              # WantedBy=default.target

    - name: Clone and copy configuration files
      become: true
      block:

        - name: Clone the node_exporter configuration files repo
          ansible.builtin.git:
            repo: "https://github.com/prometheus/node_exporter.git"
            dest: "{{ node_exporter_dir }}/config_files"

        - name: Copy the node_exporter unit files into systemd directory
          ansible.builtin.copy:
            remote_src: true
            src: "{{ node_exporter_dir }}/config_files/examples/systemd/{{ item }}"
            dest: "/etc/systemd/system/{{ item }}"
            mode: '0755'
          loop:
            - "node_exporter.socket"
            - "node_exporter.service"

        - name: Copy the node_exporter binary to /usr/sbin
          ansible.builtin.copy:
            remote_src: true
            src: "{{ node_exporter_extracted_dir }}/node_exporter"
            dest: /usr/sbin/node_exporter
            owner: node_exporter
            group: node_exporter
            mode: '0755'

        - name: Copy sysconfig file to /etc/sysconfig
          ansible.builtin.copy:
            remote_src: true
            src: "{{ node_exporter_dir }}/config_files/examples/systemd/sysconfig.node_exporter"
            dest: "/etc/sysconfig/node_exporter"
            mode: '0755'


    - name: Systemd service commands
      become: true
      block:

        - name: Check if firewalld is running
          ansible.builtin.systemd:
            name: firewalld
          register: firewalld_status

        - name: Output firewalld status
          ansible.builtin.debug:
            msg: "Firewalld Status: {{ firewalld_status.status['ActiveState'] }}"

        - name: Open port 9100 if firewalld is running
          ansible.builtin.shell:
            cmd: |
              sudo firewall-cmd --add-port=9100/tcp --permanent
              sudo firewall-cmd --reload
          when: firewalld_status.status['ActiveState'] == 'active'

        - name: Reload daemons and start node_exporter
          ansible.builtin.systemd:
            name: node_exporter.service
            state: started
            enabled: true
            daemon_reload: true

    - name: Save remote host's IP to facts
      ansible.builtin.set_fact:
        node_exporter_target_ip: "{{ ansible_default_ipv4.address }}:9100"

    - name: Save remote host's IP to facts
      ansible.builtin.set_fact:
        node_exporter_target_name: "{{ ansible_hostname }}"


    - name: Read in data from targets.json
      become: true
      delegate_to: "{{ control_node_inventory_name }}"
      block:

        - name: Check for targets.json
          ansible.builtin.stat:
            path: /etc/prometheus/targets.json
          register: targets_file_stat

        - name: Read contents of targets.json
          ansible.builtin.slurp:
            src: /etc/prometheus/targets.json
          register: targets_file_contents_raw
          when: targets_file_stat.stat.exists


    - name: Parse targets.json and add new target
      vars:
        target_found: false
      when: targets_file_stat.stat.exists
      block:

        - name: Parse the raw content from targets.json
          ansible.builtin.set_fact:
            targets_file_contents: "{{ targets_file_contents_raw.content | b64decode | from_json }}"

        - name: Debug the list of targets
          ansible.builtin.debug:
            msg: |
              {{ item }}
          loop: "{{ targets_file_contents }}"

        - name: Check for the existence of the current node in targets.json
          ansible.builtin.set_fact:
            target_found: true
          when: node_exporter_target_ip in item.targets or node_exporter_target_name in item.labels.hostname
          loop: "{{ targets_file_contents }}"

        - name: Output the result of IP check
          ansible.builtin.debug:
            msg: "IP already in targets: {{ target_found }}"
          when: not target_found

        - name: Add to targets_file_contents if IP was not found
          ansible.builtin.set_fact:
            new_targets: |
              {{ targets_file_contents + [{'targets': [node_exporter_target_ip], 'labels': {'job': 'node', 'hostname': node_exporter_target_name}}] }}
          when: not target_found

        - name: Output the new targets if it was updated with the new node
          ansible.builtin.debug:
            msg:
              - "IP didn't exist, added."
              - "{{ item }}"
          loop: "{{ new_targets }}"
          when: new_targets is defined


        - name: Write the new targets to targets.json
          become: true
          delegate_to: "{{ control_node_inventory_name }}"
          when: new_targets is defined
          ansible.builtin.copy:
            dest: /etc/prometheus/targets.json
            content: "{{ new_targets | to_json }}"
            mode: '0755'


    - name: Output the node's metrics IP endpoint
      ansible.builtin.debug:
        msg: "http://{{ node_exporter_target_ip }}/metrics"
