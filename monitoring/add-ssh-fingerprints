#!/bin/bash

declare INVENTORY_FILE=
declare SSH_CONFIG_FILE=
declare KNOWN_HOSTS="$HOME/.ssh/known_hosts"
declare -a IPS
declare VERBOSE=0

verbose() {
    [[ $VERBOSE -gt 0 ]] && printf "%s\n" "$*"
}

# err() {
#     :
# }

parse-ansible-inventory(){
    local -a ENTRIES=()
    IFS=$'\n' read -r -d $'\0' -a ENTRIES < <(
        perl -ne 'print "$1\n" if m/ansible_host=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/' "$INVENTORY_FILE"
    )
    IPS=("${IPS[@]}" "${ENTRIES}")
}

parse-ssh-config(){
    local -a ENTRIES=()
    IFS=$'\n' read -r -d $'\0' -a ENTRIES < <(
        perl -ne 'print "$1\n" if m/^\s*Hostname\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/' "$SSH_CONFIG_FILE"
    )
    IPS=("${IPS[@]}" "${ENTRIES[@]}")
}

add-fingerprints(){
    local fingerprint_file
    fingerprint_file="$(mktemp)"
    for ip in "${IPS[@]}"; do
        verbose "Checking for fingerprint for $ip"
        : > "$fingerprint_file"

        ssh-keyscan -H "$ip" 2>/dev/null | grep -o '^|.*$' > "$fingerprint_file" || {
            printf >&2 "Failed to obtain fingerprint from: %s\n" "$ip" && continue
        }
        if ! ssh-keygen -F "$ip" -f "$KNOWN_HOSTS" > /dev/null 2>&1; then
            printf "Fingerprint not found. Adding...\n"
            cat -s "$fingerprint_file" | tee -a "$KNOWN_HOSTS" > /dev/null 2>&1 || {
                printf >&2 "Failed to add fingerprint for %s to %s\n" "$ip" "$KNOWN_HOSTS" && return 1
            }
        else
            printf "Fingerprint for %s already exists in %s -- skipping.\n" "$ip" "$KNOWN_HOSTS"
            continue
        fi

    done
}


while [[ -n $1 && $1 =~ ^- && $1 != '--' ]]; do
    case $1 in
        -i|--inventory)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && INVENTORY_FILE=$1; } || {
                printf >&2 "Bad argument to -i/--inventory: %s\n" "$2"
            }
            [[ -f $INVENTORY_FILE ]] || {
                printf >&2 "Bad inventory file: %s -- File does not exist.\n" "$INVENTORY_FILE"
                exit 1
            }
            shift;
            ;;

        -s|--ssh-config)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && SSH_CONFIG_FILE=$1; } || {
                printf >&2 "Bad argument to -s/--ssh-config: %s\n" "$2" && exit 1
            }
            [[ -f $INVENTORY_FILE ]] || {
                printf >&2 "Bad ssh config file: %s -- File does not exist.\n" "$INVENTORY_FILE"
                exit 1
            }
            shift;
            ;;

        -k|--known-hosts)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && KNOWN_HOSTS=$1; } || {
                printf >&2 "Bad argument to -i/--inventory: %s\n" "$2" && exit 1
            }
            shift;
            ;;

        -v|--verbose)
            VERBOSE=1
            shift;
            ;;

        -h|--help)
            : "TODO"
            cat <<- EOF
		Usage: ${BASH_SOURCE[0]} [OPTIONS]
		
		Add SSH host key fingerprints from an Ansible inventory or SSH config file to the known_hosts file of your choice.

		Options:
		  -i, --inventory FILE        Path to Ansible inventory file (INI format only).
		  -s, --ssh-config FILE       Path to SSH config file.
		  -k, --known-hosts FILE      Path to known_hosts file (default: \$HOME/.ssh/known_hosts).
		  -h, --help                  Show this help message and exit.

		Examples:
		  ${BASH_SOURCE[0]} --inventory ./inventory.ini
		  ${BASH_SOURCE[0]} -i inventory.ini -k /tmp/known_hosts
		  ${BASH_SOURCE[0]} -s ~/.ssh/config
		  ${BASH_SOURCE[0]} -i inventory.ini -s ~/.ssh/config
		  ${BASH_SOURCE[0]} -n -s ~/.ssh/config

		EOF
        exit 0
            ;;

        *)
            printf "Unrecognized argument: %s\n" "$1"
            shift;
            ;;
    esac
done

[[ $1 == '--' ]] && shift;

if [[ -z $INVENTORY_FILE && -z $SSH_CONFIG_FILE ]]; then
    printf >&2 "No SSH config file or ansible inventory was provided!\n"
    printf >&2 "See %s --help for usage.\n" "${BASH_SOURCE[0]}"
    exit 1
fi

{ [[ -n $INVENTORY_FILE ]] && parse-ansible-inventory; } || {
    printf >&2 "Failed to process inventory! \n" && exit 1
}

{ [[ -n $SSH_CONFIG_FILE ]] && parse-ssh-config; } || {
    printf >&2 "Failed to process SSH config file!\n" && exit 1
}

verbose "File processed."
verbose "IP Address list obtained:"
printf -- "%s\n" "${IPS[@]}"

add-fingerprints || {
    printf >&2 "Failed to add fingerprints to known hosts file! (%s)\n" "$KNOWN_HOSTS" && exit 1
}
verbose "Fingerprints successfully added!" 
exit 0

