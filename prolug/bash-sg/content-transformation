#!/bin/bash
# shellcheck disable=SC2034,SC2016


























printf "Large-scale content transformations with Bash.\n"






































































printf "This is a tricky topic to approach.\n"
printf "First, I'll lay out some groundwork.\n"

printf "This talk assumes some knowledge (I have talked about all of these things).\n"

declare -a PREREQUISITES=(
    "pipelines and redirection"
    "regex"
    "parameter expansion"
)






















































printf "Let's talk about the tools first.\n"
printf "We will be primarily be using perl and sed (maybe a little bit of awk).\n"

printf "Sed and perl have some overlapping functionality.\n"
printf "But, there are things perl can do that sed cannot, and visa versa.\n"

printf "One of the most common use cases is performing substitutions.\n"
printf "I've shown these types of substitutions before but I've never really went indepth into how it works.\n"

    sed 's/old/new/'

printf "It's simple on the face of it: Match a pattern, replace it with something else.\n"
printf "There are modifiers you can add at the end (like 'g' for global).\n"









































































printf "Let's look at this substitution.\n"

    printf "Match the word hello.\n" | perl -pe 's/hello//'
    # Output: Match the word .

printf "This simply matches the word 'hello' and replaces it with nothing.\n"
printf "But what's happening here?\n"

printf "Doing a substutition or other one-liner with perl, you'll usually want to use the -pe options.\n"

printf "The '-p' wraps the input in a printing loop.\n"
printf "The '-e' specifies the expression.\n"
printf "Each line will be printed after being run through whatever code we put in the -e (expression).\n"

printf "This is the default behavior in 'sed'.\n"

    printf "Match the word hello.\n" | sed 's/hello//'
    # Output: Match the word .

printf "So basically, use 'perl -pe' to make it behave like sed.\n"

























































printf "By default, 'sed' uses basic regular expressions (BREs).\n"
printf "I went over this in the regex talk.\n"
printf "Basically, BREs require you to escape certin regex operators (e.g., capture groups).\n"

    printf "Capture hello and greet the user.\n" | sed "s/.*\(hello\).*/\1, $USER./"
    # output: hello, kolkhis. 

    printf 'Note the double quotes, needed for $USER to expand.\n'

printf "To enable Extended regular expresssions (EREs), use the -E option.\n"

    printf "Capture hello and greet the user.\n" | sed -E "s/.*(hello).*/\1, $USER./"
    # output: hello, kolkhis.

printf "Now sed is acting a lot more like perl.\n"

printf "Side note: The -E is now POSIX-compliant.\n"


























































# Modifiers: s/old/new/X
printf "After the last '/' in a substitution command, we can add modifiers to change behavior.\n"
printf "A common one is 'g' (global), which performs the substitution on ALL matches.\n"

    printf "hello, replace hello with hi\n" | perl -pe 's/hello/hi/g'
    printf "hello, replace hello with hi\n" | sed 's/hello/hi/g'
    # output: hi, replace hi with hi

printf "Cool. But this is case sensitive.\n"

    printf "Hello, replace hello with hi\n" | perl -pe 's/hello/hi/g'
    printf "Hello, replace hello with hi\n" | sed 's/hello/hi/g'
    # output: Hello, replace hi with hi

printf "We can use the 'i' modifier to make it case-insensitive.\n"

    printf "Hello, replace hello with hi\n" | perl -pe 's/hello/hi/gi'
    printf "Hello, replace hello with hi\n" | sed 's/hello/hi/gi'
    # output: hi, replace hi with hi




































































# in-place editing
printf "Now, if we're not using a pipe and we want to perform operations on files, we can.\n"

printf "Both perl and sed have a '-i' option to enable in-place editing of files.\n"

    cat ./hello.c
    perl -pi -e 's/world/friend/g' ./hello.c
    cat ./hello.c

printf "So we replaced 'Hello, world.' with 'Hello, friend.'\n"
printf "If we didn't specify '-i', it would only output the change to stdout.\n"

printf "Now let's change it back with sed.\n"

    cat ./hello.c
    sed -i -E 's/friend/world/g'
    cat ./hello.c

printf "Cool. But, what if we wanted to make a backup before we make any changes?\n"

printf "That's built in to '-i'. Just add a suffix directly after the '-i' and it'll make a backup.\n"

    perl -pi.bak -e 's/world/friend/g' ./hello.c
    sed -i.bak 's/world/friend/g' ./hello.c

printf "This will create a 'hello.c.bak' file, which is a backup of the original.\n"
printf "This is very useful if you're working with files that are not under version control.\n"










































































# Substituting only on matching lines

printf "Sometimes we only want to perform substitutions on lines that match a certain pattern.\n"

printf "Take this 'users.txt' for example:\n"

    cat ./examples/users.txt
cat << EOF
user: alice, role: admin
user: bob, role: user
user: carol, role: admin
user: dave, role: user
user: eve, role: guest
EOF

printf "Say we want to change the role for 'eve' from 'guest' to 'admin'.\n"

    sed -i.bak '/eve/ s/guest/admin/' ./examples/users.txt

printf "Using sed, we specify a pattern (/eve/) BEFORE we put in the command (s///)\n"
printf "This will perform the command _only_ on the lines matching the pattern.\n"

printf "We can achieve this using perl too, in a bit of a different way.\n"

    perl -p -e 's/guest/admin/ if m/eve/' ./examples/users.txt

printf "We have a simple 'command if condition' here.\n"
printf "This leverages the fact that Perl is an actual entire programming language.\n"
printf "The 'm/pattern/' in Perl is just a way to match a pattern, and will return true if it matches.\n"


























































# Inserting and deleting
printf "So, we know how to do substitutions. That's fine. But there's more.\n"

printf "With sed, we can also insert lines and delete lines.\n"
printf "Let's add a new user to the 'users.txt' file above 'alice'.\n"

    cat ./examples/users.txt
    # user: alice, role: admin
    # user: bob, role: user
    # user: carol, role: admin
    # user: dave, role: user
    # user: eve, role: guest

    sed -i.bak '/alice/i user: aaron, role: user' ./examples/users.txt
    cat ./examples/users.txt

    # user: aaron, role: user
    # user: alice, role: admin
    # user: bob, role: user
    # user: carol, role: admin
    # user: dave, role: user
    # user: eve, role: guest

printf "This uses sed's 'i' command. It inserts a line above the lines matching a pattern.\n"

printf "We can also add lines AFTER a specific line using the 'a' command.\n"

    sed -i.bak '/eve/a user: fred, role: admin' ./examples/users.txt
    cat ./examples/users.txt

    # user: aaron, role: user
    # user: alice, role: admin
    # user: bob, role: user
    # user: carol, role: admin
    # user: dave, role: user
    # user: eve, role: guest
    # user: fred, role: admin




























































# Inserting and deleting (cont)
printf "Now let's delete those entries we made.\n"

    sed -i.bak '/fred/d' ./examples/users.txt

printf "This just deletes any lines that match the pattern.\n"
printf "But we added multiple lines. Let's specify multiple patterns.\n"

    sed -i.bak -E '/(fred|aaron)/d' ./examples/users.txt
    cat ./examples/users.txt
    # user: alice, role: admin
    # user: bob, role: user
    # user: carol, role: admin
    # user: dave, role: user
    # user: eve, role: guest

printf "Here we use a capture group to specify two patterns. Match either 'fred' or 'aaron', and delete.\n"
printf "We used -E so that we did not have to escape the parentheses.\n"




























































## TO BE CONTINUED



















































































declare -a IDEAS=(
    "book project changes"
    "log filtering"
    "translating github flavored markdown to mkdocs flavored markdown"
)


