#!/bin/bash



























printf "Redirection and File I/O.\n"
































































printf "If you don't understand something, stop me and we can work through it.\n"






























































printf "Redirection is one of the most important parts of bash.\n"
printf "We use it to specify where we get our input, and where we send our output.\n"























































printf "The most common redirection that you've probably already used is a pipe '|' redirect.\n"
printf "These are known as pipelines.\n"
printf "What a pipe does is takes the stdout from one command and passes it as stdin to another command.\n"

printf "A common use case is piping to sed.\n"

printf "Let's do some bash.\n" | sed 's/bash/redirection/' # outputs "Let's do some redirection"

printf "Pipelines are one of the most powerful features available in a shell.\n"
printf "They can become long and complex. It's important to remember that you're just working with text.\n"




















































printf "Let's look at the other types of redirections.\n"





























































# > file
printf "We can redirect output (stdout) with the '>' operator.\n"
printf "This is usually to output to files.\n"

touch file.txt # not needed
printf "This will go in a file.\n" > file.txt

printf "This takes the stdout and directs it into the file.\n"

printf "Note that the '>' operator will overwrite all file contents. So, use this carefully.\n"
printf "If you want to *append* to a file, use '>>' instead.\n"

printf "This will not overwrite the file.\n" >> file.txt














































































# < file
printf "The '<' operator reads from a file and uses its contents as stdin.\n"

printf "Some commands prefer to read their input like this when using files.\n"

printf "We could do this:\n"
cat < file.txt

printf "But 'cat' can take a file as an argument already.\n"

printf "Let's read the contents of a file into a variable.\n"

declare CONTENTS
read -r CONTENTS < file.txt
printf "%s\n" "$CONTENTS"

printf "Now the contents of file.txt are in the variable CONTENTS.\n"
printf "But, this only save the first line of the file into the variable.\n"
































































# Continuation
printf "But what if we want to make sure the contents are stored line-by-line as an array?\n"

# declare an array variable
declare -a CONTENTS

# Populate the array with the lines of the file
read -r -a CONTENTS < file.txt

printf "Now the CONTENTS variable is an array that we could then loop over.\n"

for LINE in "${CONTENTS[@]}"; do
    printf "Line: %s\n" "$LINE"
done

printf "But, there's an easier way to do this if you just need to loop over lines.\n"





















































# Looping with < file
printf "One of the most useful ways to use this operator is with loops.\n"
printf "Let's loop over the lines of a file.\n"

while read -r LINE; do
    printf "Line: %s\n" "$LINE"
done < file.txt

printf "This will loop over the lines of the file and print them out.\n"


























































# Process substitution
printf "There's a thing in bash called process substitution.\n"
printf "It allow you to treat the output of a command as a file.\n"
printf "This follows the same redirection principles as working with real files.\n"

#######################

printf "The syntax is <(cmd)\n"
printf "Let's look at an example.\n"

# Find all markdown files in the current tree
<(find . -name '*.md')

printf "This will treat the output of the 'find' command as a file.\n"
printf "That is, each line returned by 'find' is a line in the imaginary file.\n"


printf "We can also do things like this:\n"
diff <(ls dir1) <(ls dir2)  

# same thing:
ls dir1 > file1.txt
ls dir2 > file2.txt
diff file1.txt file2.txt


printf "diff takes filenames as arguments, we can use process substitution instead."

printf "A more solid example:\n"
printf "We can utilize process substitution to read the output of a command into an array variable.\n"


# declare an array variable
declare -a FILES

# Populate the array variable with filenames
read -r -a FILES < <(find . -name '*.md')

printf "Now the FILES array contains all the lines of the imaginary file we made with <() \n"
printf "We can now loop over them.\n"

for FILE in "${FILES[@]}"; do
    printf "File: %s\n" "$FILE"
done

































































# Looping over a process substitution
printf "Just like regular file redirection, we can also pass process substitutions to a while loop.\n"

while read -r FILE; do
    printf "File: %s\n" "$FILE"
done < <(find . -name '*.md')



























































# Mention: >()
printf "There's also another type of process substitution that works the other way around.\n"
printf "The syntax for that is >() \n"

printf "Here's a basic example:\n"

printf "Hello!\n " > >(cat)

printf "This passes the output of 'printf' to 'cat' as its input.\n"

printf "I have not personally found a use case for this yet.\n"
printf "Pipelines are usually sufficient for this type of thing.\n"



























































# File Descriptor redirects
printf "We can also control which input stream is redirected (stderr, stdout)\n"

printf "By default, '>' redirects stdout (file descriptor 1).\n"

printf "These are the same:\n"

    cat file.txt > /dev/null
    cat file.txt 1> /dev/null

printf "Let's redirect stderr to somewhere (file descriptor 2).\n"

    cat somefile 2> /dev/null

    # 0 stdin
    # 1 stdout
    # 2 stderr

printf "This redirects only stderr to /dev/null, so stdout will remain untouched.\n"





















































# Attaching fds 
printf "We can redirect both stdout and stderr by *attaching* the file descriptors.\n"

    cat somefile > /dev/null 2>&1 # GOOD

printf "Note the order here. It matters.\n"
printf "The shell evaluates the redirections before any command is evalutated.\n"

printf "So, if you were to do:\n"

    cat somefile 2>&1 > /dev/null  # BAD

printf "This would not work as intended.\n"

printf "The redirects themselves can be anywhere, but the order matters.\n"

printf "For example, this would work:\n"

    > /dev/null 2>&1 cat somefile

printf "Because the redirects happen in the correct order, and are evaluated before the cmd is run.\n"



























































# Outputting to file descriptors
printf "We can also redirect stdout to stderr.\n"
printf "We utilize this is bash scripts to print error messages to stderr, where they belong.\n"

    printf >&2 "This will print to stderr.\n"

    # >&2
    # 1>&2

printf "This effectively attaches stdout to stderr.\n"
printf "This works because &2 is essentially a file (of type FIFO/named pipe).\n"

printf "Remember, when using '>' alone will redirect stdout.\n"
printf "So, this is the same as:\n"

    printf 1>&2 "This will print to stderr.\n"

# About the >& syntax
printf "The syntax '>&' is actually 'duplicating' the file desciptor.\n"
printf "It doesn't literally *create* a new descriptor.\n"
printf "It makes one descriptor point to the same target as another.\n"

printf "So >&2 means 'point to wherever stderr goes to'.\n"
































































# Closing file descriptors

printf "As we just learned, you can redirect file descriptors to other file descriptors.\n"
printf "But what if you wanted to silence one?\n"

printf "For example, if we wanted to silence stderr for a line:\n"

    cat somefile.txt 2>&-           # &- is a null fd

printf "This effectively closes file descriptor 2 (stderr) for the 'cat' command.\n"

















































# Redirecting for entire scripts
printf "You can utilize the 'exec' function with redirects to do some cool things.\n"
printf "This allows you to set redirections for all commands in the entire script.\n"

printf "Let's look at an example.\n"

    exec 2>error.log

printf "This will redirect stderr to error.log for ALL commands that come after it inside the script.\n"

    help exec

printf "exec changes the shell's file descriptors.\n"
printf "You probably don't want to do this in an interactive shell.\n"













































































# Heredocs / Herestrings 

printf "Since we're talking about file I/O, I think this is a good time to mentions this.\n"

cat << EOF
In Bash (and other languages), there is a concept of a "heredoc."  
A heredoc is a self-contained document right in the script (here) that is treated as a file (document).

Heredocs are super useful for multiple different things.
For example, dynamically generating files based on variables.

Heredocs start with the '<<' operator, followed by a LIMIT_STRING, and are terminated with a LIMIT_STRING.
Your limit string can be anything, but you'll see a lot of 'EOF'
EOF

# Limit string can be anything
cat << _limit_string
Hi.
_limit_string

printf "Heredocs are usually directed to 'cat' or other command that takes a file via stdin."

    declare MY_VAR="Hello, world.\n"
    cat << EOF
    With this syntax, all variables and subshells are expanded.  
    So, I can say: $MY_VAR # Hello, world.
    I can also call subshells: $(printf "Hello, world!") # Hello, world!
EOF
# note the indentation


















































# Heredocs (cont.)
printf "There are ways to change how heredocs behave.\n"

cat <<- EOF
	This syntax <<- will strip leading *tabs* (NOT spaces).
	So these lines won't be indented.
EOF

cat << 'EOF'
Surrounding the limit string with quotes will stop the heredoc from expanding variables/subshells.
So, this will be literal: $MY_VAR (this won't expand)
So will this: $(printf "Hello, world!")
EOF

printf "We can redirect the output of heredocs on the first line.\n"
printf "We can use a pipe:\n"

cat << EOF | sudo tee ./testdoc.txt
This text will be saved in the ./testdoc file.
EOF

printf "We can use different redirects:\n"
cat << EOF >> ./testdoc.txt
This text will be appended to ./testdoc
EOF





















































# Herestrings
printf "Herestrings treat the string after it as a file for stdin.\n"
# TODO(feat): Update this section on herestrings

    entr -c bash -c "./testscript" <<< ./testscript
    entr -c bash -c "./testscript" < <(find . -name "testscript")

    declare testvar='old old old'
    perl -pe 's/old/new/g' <<< "$testvar"










































































printf "Questions?\n"






































