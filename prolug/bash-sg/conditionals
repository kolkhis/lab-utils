#!/bin/bash


























printf "Conditionals.\n"





















































printf "THEORY TIME!\n"

printf "Almost every tool you use on Linux was written in C.\n"
printf "All these common tools are written in C: grep, cat, sed, ls, find, cp, mv, rm, mkdir, etc.\n"

printf "Let's look at a very simple C program.\n"
cat ./examples/hello.c

printf "As you may notice, there's a line that comes at the end of every C program.\n"
printf "Can anyone tell me what that is?\n"










































































printf "return 0;\n"
printf "This is what's called an 'exit code' (or 'exit status').\n"

printf "return 0; means that the program reached the end of execution without error.\n"
printf "But why is this important?\n"























































































printf "Because conditionals in Bash operate on these exit codes.\n"

printf "This is unique to bash/sh.\n" 
printf "In other programming languages, conditions are evaluated to booleans - 'true' or 'false'.\n"
printf "Bash doesn't have boolean values. It has 'truthy' and 'falsey' values.\n"
printf "0 is truthy, and anything not 0 is falsey.\n"

printf "But, Bash does have a 'true' and a 'false'.\n"





















































































printf "Let's look at 'true' and 'false' in bash.\n"

help true
printf "This is not a boolean -- it's a program that returns a 'successful result' (0)\n"

help false
printf "Also not a boolean. This program returns an 'unsuccessful result' (1)\n"














































printf "Take this example:\n"
if [[ -f ./examples/hello.c ]]; then
    printf "The file exists.\n"
fi

printf "This uses the '[[' bash builtin command.\n"
printf "'[[' starts the command, '-f ./examples/hello.c' is an argument to that command.\n"  
printf "']]' ends the command.\n"


printf "If the condition is true, (./examples/hello.c exists and is a regular file), the exit code of the '[[' command will be 0.\n"
printf "But, if the condition turns out to be false, the exit code will be non-zero.\n"


printf "So this condition will evaluate to:\n"
if [[ 0 ]]; then
    printf "File exists.\n"
fi




































































printf "Well what if we want to check if a condition is NOT met?\n"
printf "For that, we use the '!' (NOT) operator.\n" 

if [[ ! -f ./goodbye.c ]]; then printf "File does not exist\n"; fi

printf "The '!' operator simply reverses the condition.\n"


printf "The ! operator can be used either inside or outside the brackets in bash.\n"

# Also valid:

if ! [[ -f ./examples/hello.c ]]; then
    printf "File doesn't exist!\n"
fi
printf "This is preference. I prefer to use it inside the brackets.\n"
printf "In POSIX-compliant scripts, do it outside the brackets.\n"

if ! [ -f ./examples/hello.c ]; then
    printf "File doesn't exist.\n"
fi
























































# Checking multiple conditions
printf "Now that we know what's true and what's false, we can combine some conditions.\n"

printf "The '&&' (AND) and '||' (OR) operators work with these truthy and falsy values.\n"
printf "Let's look at '&&'\n"

    if [[ -f ./examples/hello.c && -s ./examples/hello.c ]]; then
        printf "File exists and is not empty.\n";
    fi

printf "The POSIX equivalent using single brackets:\n"

    # If using single brackets [ ... ], use && and || outside
    if [ -f ./examples/hello.c ] && [ -s ./examples/hello.c ]; then
        printf "File exists and is not empty.\n";
    fi

printf "If you want to check what a condition flag means, use 'help test':\n"
help test | grep -- '-s'
# Or go to `man bash` and type: /^CONDITIONAL EXPRESSIONS



























































































# Short-circuit logic
printf "Conditionals can be done without the use of 'if/elif/else', 'case', etc.\n"

printf "We can use 'short-circuit' logic to run commands based on conditions.\n"

    cat ./examples/hello.c && printf "Successfully ran 'cat'\n"

printf "This '&&' works here just like in the 'if' statements.\n"
printf "It checks for 0 (true) or non-zero (false).\n"

printf "The first condition is the exit code of the 'cat' command.\n"
printf "If that condition passes (exit code 0), then the next condition is evaluated.\n"

printf "This makes error handling very easy in Bash.\n"

    cat ./nonexistent.file || printf "Failed to run 'cat'\n"

printf "This '||' (OR) condition checks if the 'cat' command fails (non-zero exit code).\n"
printf "If the 'cat' fails (it does), then it will run the 'printf' command.\n"










































































# Example(s)
printf "Let's check if a package is installed.\n"

    declare PKG="jq"

printf "First we'll use an if/else statement.\n"

    if dpkg -l | grep -i "$PKG"; then
        printf "Package is installed.\n";
    else
        printf "Packge is not installed.\n";
    fi

printf "This works great. We can also use short-circuit logic for this:\n"

    dpkg -l | grep -i "$PKG" || printf "Command not found.\n"

printf "This will work on my Ubuntu Server system. But what about a cross-platform solution?\n"

    if which "$PKG"; then
        printf "Package is installed (cmd in PATH).\n"
    else
        printf "Package is not installed (cmd not in PATH).\n"
        # sudo apt install -y $PKG
    fi

    # 'type' also works
    if type "$PKG"; then printf "Package is installed\n"; fi

printf "Though, 'which' and 'type' are not POSIX-compliant.\n" 
printf "Use 'command -v' if you want it to be.\n"

    if command -v "$PKG"; then
        printf "Package is installed (cmd in PATH).\n"
    else
        printf "Package is not installed (cmd not in PATH).\n"
        # sudo apt install -y $PKG
    fi
    # Note: Only check one pkg at a time













































# case statements
printf "We also have 'case' statements.\n"
printf "These check the condition of a single value and compare it to each case.\n"
printf "Case statements support the user of 'patterns'.\n"

    declare VAR="Hello, world!"
    
    case $VAR in
        *world)
            printf "Var contains 'world'\n"
            ;;
        hello*)
            printf "Var contains 'hello'\n"
            ;;
        [a-z]*)
            printf "Contains letters\n"
            ;;
        *)
            printf "Unknown!\n"
            ;;
    esac

printf "This is functionally equivalent to using these if/elif/else statements:\n"

    if [[ $VAR == *world ]]; then
        printf "Var contains 'world'\n"
    elif [[ $VAR == hello* ]]; then
        printf "Var contains 'hello'\n"
    elif [[ $VAR == [a-z]* ]]; then
        printf "Contains letters.\n"
    else
        printf "Unknown!\n"
    fi

printf "When your right hand side is unquoted, it's treated as a pattern.\n"

# Pattern matching v. raw string v. regex operators 
    if [[ $VAR == 'world' ]]; then
        printf "This treats it as a raw string: 'world' (since it's in quotes)\n"
    fi

    if [[ $VAR == *world ]]; then
        printf "This is interpreted as a pattern (since it's NOT in quotes)\n"
    fi

    if [[ $VAR =~ .*world ]]; then
        printf "This uses regex (the POSIX flavor).\n"
    fi

    

















































































































# Arithmetic Condidiontals
printf "You can do numeric/arithmetic conditionals either in brackets or double parentheses.\n"
printf "The operators will change depending on which notation you use.\n"

    declare -i MYINT=3

printf "The double parentheses will use the standard comparison operators you'll see in most languages.\n"

    if (( MYINT == 3 )); then :; fi
    if (( MYINT != 3 )); then :; fi
    if (( MYINT < 3 )); then :; fi
    if (( MYINT <= 3 )); then :; fi
    if (( MYINT > 3 )); then :; fi
    if (( MYINT >= 3 )); then :; fi
    # Increment in the same way
    (( MYINT+=1 ));
    (( MYINT++ ));

printf "Side note: This notation allows for ternary operators.\n"

printf "Single or double bracket notation requires different comparison operators.\n"

    if [[ $MYINT -eq 3 ]]; then printf "Equal to 3.\n"; fi
    if [[ $MYINT -ne 3 ]]; then printf "Not equal to 3.\n"; fi
    if [[ $MYINT -gt 3 ]]; then printf "Greater than 3.\n"; fi
    if [[ $MYINT -ge 3 ]]; then printf "Greater than or equal to 3.\n"; fi
    if [[ $MYINT -lt 3 ]]; then printf "Less than 3.\n"; fi
    if [[ $MYINT -le 3 ]]; then printf "Less than or equal to 3.\n"; fi

printf "These are the arithmetic operators you'll use in bracket notation.\n"
printf "If used on strings, these operators will compare the strings lexographically.\n"
# man bash /^\s*ARITHMETIC EVALUATION






































































printf "Questions?\n"













































