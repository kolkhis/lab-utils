#!/bin/bash
# shellcheck disable=SC2050

























printf "Regular Expressions (regex) and Pattern Matching.\n"































































printf "Regular expressions (regex) are one of the most powerful ways to parse text.\n"
printf "Many tools on Linux support the use of regex.\n"
printf "bash (itself), sed, awk, grep, perl, to name a few.\n"






































































# Regex vs pattern matching
printf "Regex is distinct from Pattern Matching.\n"
printf "You can use regex in conditions with the =~ operator.\n"

# Just examples
declare MY_FILE='./text'
[[ $MY_FILE =~ .*([a-z])+.* ]]
# man 7 regex


printf "You can use pattern matching with the == or = operators.\n"

[[ $MY_FILE == *[a-z]* ]]
# man bash /^\s*Pattern Matching
















































# Regex
printf "Let's start with regex.\n"
printf "With regex, the goal is to match a specific pattern.\n"
printf "We have a number of tools at our disposal to achieve this goal.\n"

printf "The '.' (dot) character will match any single character.\n"

[[ "abcdefg" =~ . ]]  # Will match any one character (the first, a)

printf "We can also add a quantifier, which will say 'match more of this'.\n"

printf "The two most common quantifiers are '*' and '+'.\n"
printf "'*': Matches ZERO or more of whatever comes before it (optional matching).\n"
printf "'+': Matches ONE or more of whatever comes before it (non-optional matching).\n"


[[ "abcdefg" =~ .* ]]  # Will match zero or more any one character (will match anything)
[[ "abcdefg" =~ .+ ]]  # Will match one or more any one character (will also match anything, as long as there's something)

printf "But we usually want to be more specific than '.*' \n"


















































# Sets
printf "We can be more specific with sets, which will matche a single character: [abc] \n" # Will match a, b, or c 

[[ "abcdefg" =~ [abc] ]]  # Will only match one character


printf "We can use a quantifier to specify how many we want to match.\n"

[[ "abcdefg" =~ [abc]+ ]]  # Will match one or more characters, 'abc'
[[ "abcdefg" =~ [abc]* ]]  # Will match zero or more characters, 'abc'

printf "We can also use sets to specify character classes.\n"

[[ "abc123" =~ [A-Za-z0-9]+ ]] # Will match one or more of lowercase letters and numbers


printf "If we're using Bash regex, we can't use \s or \w, but we can use pattern matching classes.\n"

[[ "abc 123" =~ [[:space:]]+ ]] # Will match one or more of whitespace characters

printf "But if we're using sed or perl, we can use \s and \w character classes.\n"
echo "abc 123" | perl -pe 's/\s(.*)/\1/' # Output: abc123

# Negated Sets
printf "We can also use sets to NEGATE character classes.\n"

[[ "abcdefg" =~ [^xyz]+ ]] # Will match anything EXCEPT x, y, or z






















































# Character classes
printf "Character classes are a way to match a set of characters of a specific type.\n"

printf "In most regex engines, the syntax for this is '\w' where 'w' is the character class\n"

printf "Let's look at an example:\n"

printf "Match this string 123" |
    perl -pe 's/\w+/1111/'  

printf "\w says to match any word character.\n"
printf "This is functionally equivalent to using a set: [a-zA-Z0-9_] \n"

printf "There are a lot of these character classes.\n"

printf "Usually the uppercase variant of the class is the opposite.\n"

printf "Match this string 123" |
    perl -pe 's/\W+/1111/'  

printf "\W says to match any non-word character (the opposite of \w).\n"
printf "Functionally equivalent to using a negated set: [^a-zA-Z0-9_] \n"

cat << EOF
Useful character classes:
\s - Any whitespace 
    - same as [ \t\r\n\f] -- Space, tab, Carriage Return, LineFeed, FormFeed
    - \S matches everything else -- [^ \t\r\n\f]
\w - Any word character (letters, numbers, underscores)
    - Same as [a-zA-Z0-9_]
    - \W matches everything else -- [^a-zA-Z0-9_]
\d - Any digit
    - [0-9]
    - \D matches everything else -- [^0-9]

EOF
































































# POSIX character classes
printf "Bash (and sh), and many coreutils (including sed) have special syntax for char classes.\n"

printf "For instance, in the Bash regex engine, you can only use POSIX-style character classes.\n"

printf "POSIX character classes look like this:\n"
cat << EOF
[:alnum:]
[:alpha:]
[:blank:]
[:cntrl:]
[:digit:]
[:graph:]
[:lower:]
[:print:]
[:punct:]
[:space:]
[:upper:]
[:xdigit:]
EOF

printf "These are used in both bash regex and in sed.\n"
printf "To use them, you need to wrap them in two sets of brackets: [[:space:]] \n"

printf "Let's look at an example:\n"

declare mystring="Hi, I'm new to regex."
[[ $mystring =~ [[:space:]]([[:alnum:]]+[[:space:]]+[[:alnum:]]+) ]] &&
    printf "Match: %s\n" "${BASH_REMATCH[1]}"

printf "Matches 1 or more whitespace chars [ \t\n\r\f] (does not capture) \n"
printf "Then matches one or more alphanumeric chars as in [a-zA-Z0-9_] \n"
printf "Then matches 1 or more whitespace chars [ \t\n\r\f] \n"
printf "Then matches alphanumeric characters again.\n"

printf "It captures the first two words that only contain alphanumeric chars, separated by space.\n"
# 'new to'





















































































































































































































































































































# Anchors
printf "There's also a thing called anchors in regex.\n"
printf "The anchor '^' matches the start of the line.\n"
printf "The anchor '$' matches the end of the line.\n"

[[ "abcdefg" =~ ^a(.*)$ ]]  # Will match because the line starts with 'a'
[[ "abcdefg" =~ ^d(.*)$ ]]  # Won't match because the line doesn't start with 'd'

printf "You can use these anchors separately.\n"

[[ "abcdefg" =~ d.*$ ]]  # Will match 'defg'
[[ "abcdefg" =~ ^ab ]]   # Will match 'ab' because the line starts with 'a'




























































































# Capture groups
printf "We can also use capture groups.\n"
printf "Capture groups are patterns that are matched and then saved into a variable to use later.\n"

[[ "abcdefg" =~ (abc) ]] # will match 'abc' literally and save into ${BASH_REMATCH[1]}

printf "Match: %s\n" "${BASH_REMATCH[1]}" 
# Output:
# Match: abc

printf "Different programs handle referencing capture groups differently.\n"
printf "For instance, in sed, vim, and some others, use \1 to reference the first capture group.\n"

echo "abcdefg" | sed -E 's/(abc)defg/\1/' # output: abc

printf "We can use sets and quantifiers inside capture groups too.\n"

echo "abcdefg" | sed -E 's/([abc]*)defg/\1/'   # output: abc

echo "abcdefghjkl" | sed -E 's/([a-z]+)fg/\1/' # output: abcdefghjkl

printf "This is a fallback of 'sed'. All quantifiers are 'greedy' by default.\n"
printf "There is no way in sed or bash to make quantifiers non-greedy.\n"
printf "Enter perl.\n"

printf "Making a quantifier non-greedy in perl is easy. Just add a '?' after the quantifier (e.g., '*?')\n"
echo "abcdefghjkl" | perl -pe 's/([a-z]+?)hjkl/\1/' # output: abcde

declare MY_VAR="Going to hang with the wife."
[[ $MY_VAR =~ ^Going(.*)wife\. ]] && printf "Match: %s\n" "${BASH_REMATCH[1]}" 
[[ $MY_VAR =~ ^Going(.*)(wife)\. ]] && printf "Match: %s\n" "${BASH_REMATCH[1]}" && printf "%s\n" "${BASH_REMATCH[2]}" 
# perl / sed






































































printf "Let's try to match this string:\n"

declare MATCH_ME='set of text'
printf "%s" "$MATCH_ME" | sed -E 's/[a-zA-Z]*\s(\w*)\s(\w+)/-\n\1-\n\2\n-\n/'
# [a-zA-Z_]




















































declare VAR="string"
grep -i -E "^$VAR$" /your/file

perl -pe 'm/^string$/' /your/file


# ?: Match zero or one of whatever is before it
grep -i -E "[a-z]?"

 
declare FILE='something.md'
if [[ $FILE == something.?? ]]; then :; fi  # a 2 letter file extension
if [[ 'str' =~ .* ]]; then :; fi            # Match any character any number of times

# \< \>
# Quantifier {1,}
#  {1,}



















