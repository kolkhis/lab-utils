#!/bin/bash
# TODO: Make all of these variables controllable from the command line
declare SEARCH_DIR='./src'
declare FILE_PATTERN='u*.md'
declare SEARCH_TEXT="The discussion posts are done in Discord threads"
declare INSERT_AT_EOF=1
# declare APPENDED_TEXT="\n- The discussion posts are done in Discord threads. Click the 'Threads' icon on the top right and search for the discussion post."
declare APPENDED_TEXT="<a href="https://raw.githubusercontent.com/ProfessionalLinuxUsersGroup/lac/main/src/unit14/lab.md" download>ðŸ“¥ Download Markdown</a>"

declare -a FILES
IFS=$'\n' read -r -d '' -a FILES < <(
    find "$SEARCH_DIR" -name "$FILE_PATTERN" ! -name 'u*intro.md' #! -name 'u*lab.md'
)

debug() {
    printf "[ \033[33mDEBUG\033[0m ]: "
    printf "%s\n" "$*"
}

download-link-gen() {
    # download files should be named 'u$n_lab.*' or 'u$n_worksheet.*' (where $n is the unit number)
    for FILE in "${FILES[@]}"; do
        printf "File: %s\n" "$FILE"
        local FILENAME
        FILENAME=$(basename "$FILE")

        if ! grep -q "## Downloads" "$FILE"; then sed -i -e '$a\ ' -e '$a ## Downloads' "$FILE"; fi
        if [[ $FILENAME =~ ^u([0-9]+)lab.md$ ]]; then
            local -a DOWNLOAD_FILES
            UNIT="${BASH_REMATCH[1]}"
            [[ -n "$UNIT" ]] || {
                printf "Could not determine the unit.\n" && return 1
            }
            printf 'Searching for unit %s lab files...\n' "$UNIT"

            IFS=$'\n' read -r -d '' -a DOWNLOAD_FILES < <(
                find "./src/assets/downloads/u${UNIT}" -type f -name "*lab*"
            )

            for DOWNLOAD_FILE in "${DOWNLOAD_FILES[@]}"; do
                local FILE_LOCATION="./${DOWNLOAD_FILE#./src/}"
                local FILE_EXTENSION=".${DOWNLOAD_FILE##.*.}"
                local LINK_TO_INPUT
                # [[ $DOWNLOAD_FILE =~ u.*(\..*) ]] && FILE_EXTENSION="${BASH_REMATCH[1]}"
                printf "Lab Download file: %s\n" "${DOWNLOAD_FILE}"
                FILE_LOCATION="./${DOWNLOAD_FILE#./src/}"
                LINK_TO_INPUT="#### - <a href=\"${FILE_LOCATION}\" target=\"_blank\" download>ðŸ“¥ Download (\`${FILE_EXTENSION}\`)</a>"
                debug "Lab link: $LINK_TO_INPUT"
                if ! grep -qi "${LINK_TO_INPUT}" "${FILE}"; then
                    debug "Download link not found. Adding."
                    sed -i "/## Downloads/a ${LINK_TO_INPUT}" "$FILE" || {
                        printf "[ \033[31m ERROR: \033[0m]: Failed to insert download link.\n"
                    }
                else
                    debug "Link found - skipping."
                fi

                # Add to downloads.md
                if ! grep -qi "${LINK_TO_INPUT}" "./src/downloads.md"; then
                    debug "Download link not found. Adding."

                    sed -i "/^## Unit $UNIT$/a  ${LINK_TO_INPUT} - Lab" "./src/downloads.md" || {
                        printf "[ \033[31m ERROR: \033[0m]: Failed to insert download link (downloads.md).\n"
                    }
                else
                    debug "Link found in downloads.md - skipping."
                fi

            done

        elif [[ $FILENAME =~ ^u([0-9]+)ws.md$ ]]; then
            local -a DOWNLOAD_FILES
            UNIT="${BASH_REMATCH[1]}"
            [[ -n "$UNIT" ]] || {
                printf "Could not determine the unit.\n" && return 1
            }
            printf 'Searching for unit %s worksheet files...\n' "$UNIT"
            IFS=$'\n' read -r -d '' -a DOWNLOAD_FILES < <(
                find "./src/assets/downloads/u${UNIT}" -type f -name "*worksheet*"
            )

            for DOWNLOAD_FILE in "${DOWNLOAD_FILES[@]}"; do
                local FILE_LOCATION="./${DOWNLOAD_FILE#./src/}"
                local FILE_EXTENSION=".${DOWNLOAD_FILE##.*.}"
                local LINK_TO_INPUT
                # [[ $DOWNLOAD_FILE =~ u.*(\..*) ]] && FILE_EXTENSION="${BASH_REMATCH[1]}"
                printf "Worksheet Download file: %s\n" "${DOWNLOAD_FILE}"
                FILE_LOCATION="./${DOWNLOAD_FILE#./src/}"
                LINK_TO_INPUT="#### - <a href=\"${FILE_LOCATION}\" target=\"_blank\" download>ðŸ“¥ Download (\`${FILE_EXTENSION}\`)</a>"
                debug "Worksheet Link: ${LINK_TO_INPUT}"
                if ! grep -qi "${LINK_TO_INPUT}" "${FILE}"; then
                    debug "Download link not found. Adding."
                    sed -i "/## Downloads/a ${LINK_TO_INPUT}" "$FILE" || {
                        printf "[ \033[31m ERROR: \033[0m]: Failed to insert download link.\n"
                    }
                else
                    debug "Link found - skipping."
                fi

                # Add to downloads.md
                if ! grep -qi "${LINK_TO_INPUT}" "./src/downloads.md"; then
                    debug "Download link not found. Adding."
                    sed -i "/^## Unit $UNIT$/a ${LINK_TO_INPUT} - Worksheet" "./src/downloads.md" || {
                        printf "[ \033[31m ERROR: \033[0m]: Failed to insert download link (downloads.md).\n"
                    }
                else
                    debug "Link found in downloads.md - skipping."
                fi

            done
        fi

    done
}

create-downloads-page() {
    touch src/downloads.md
    printf "# ProLUG Linux Sysadmin - Course Work Downloads\n" >> ./src/downloads.md
    for i in {1..16}; do
        printf "## Unit %s\n" "$i" >> ./src/downloads.md
    done
}

replace-text() {
    for FILE in "${FILES[@]}"; do
        sed -i "/${SEARCH_TEXT}/s/- //" "${FILE}" || {
            printf "Failed to replace text.\n" && exit 1
        }
    done
}

append-text() {
    for FILE in "${FILES[@]}"; do
        sed -i "/$SEARCH_TEXT/a\\$APPENDED_TEXT" "$FILE" || {
            printf "Failed to append text.\n" && exit 1
        }
    done
}

create-downloads-page
download-link-gen || printf "Error while generating links.\n"
