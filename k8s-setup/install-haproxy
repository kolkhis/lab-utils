#!/bin/bash

: "${NODE_PORT:=30189}"
: "${WORKER1:=192.168.4.67}"
: "${WORKER2:=192.168.4.68}"


restart-and-enable() {
    if ! sudo systemctl restart haproxy > /dev/null; then
        printf >&2 "Couldn't restart HAProxy!\n" && return 1
    fi

    if ! sudo systemctl enable haproxy > /dev/null; then
        printf >&2 "Couldn't enable HAProxy!\n" && return 1
    fi
}

add-config-file(){
    sudo mv /etc/haproxy/haproxy.cfg /etc/haproxy/old_haproxy.cfg  
	cat <<- EOF | sudo tee /etc/haproxy/haproxy.cfg
	global
	    log /dev/log local0
	    log /dev/log local1 notice
	    chroot /var/lib/haproxy
	    user haproxy
	    group haproxy
	    daemon

	defaults
	    log global
	    mode http
	    option httplog
	    option dontlognull
	    timeout connect 5s
	    timeout client 30s
	    timeout server 30s

	frontend http_front
	    bind *:80
	    default_backend k8s_backend

	backend k8s_backend
	    balance roundrobin
	    # point to k8s using the NodePort
	    server worker1 ${WORKER1}:${NODE_PORT} check
	    server worker2 ${WORKER2}:${NODE_PORT} check
	EOF
}

debian-install-haproxy() {
    if ! sudo apt-get update; then
        printf >&2 "Unable to update apt repositories.\n" && return 1
    fi

    if ! sudo apt-get install haproxy -y; then
        printf >&2 "There was an error installing HAProxy!\n" && return 1
    fi

    if ! dpkg -l | grep -i 'haproxy'; then
        printf >&2 "Couldn't determine the existence of the HAProxy package!\n" && return 1
    else
        printf "HAProxy successfully installed!\n" 
    fi

    add-config-file || {
        printf >&2 "ERROR: Failed to add HAProxy config file.\n" && return 1
    }
    restart-and-enable || {
        printf >&2 "ERROR: Failed to add HAProxy config file.\n" && return 1
    }
}

rhel-install-haproxy() {
    if [[ $(getenforce | tr '[:upper:]' '[:lower:]') != "permissive" ]]; then
        {
            sudo setenforce 0
            sudo sed -i -E 's/^(SELINUX=)enforcing$/\1permissive/' /etc/selinux/config
        } || {
            printf "Failed to set SELinux to permissive.\n" && return 1
        }
    fi

    if [[ $(sudo systemctl is-active firewalld) == 'active' ]]; then
        printf "Firewalld is active. Adding HTTP/S ports to Firewalld.\n"
        {
            sudo firewall-cmd --add-port={443,80}/tcp --permanent
            sudo firewall-cmd --reload
        } || {
            printf "Failed to open ports 80 and 443 in firewalld.\n" && return 1
        }
    fi

    if ! sudo dnf install haproxy -y; then
        printf >&2 "There was a problem installing HAProxy!\n" && return 1
    fi

    add-config-file || {
        printf >&2 "ERROR: Failed to add HAProxy config file.\n" && return 1
    }
    restart-and-enable || {
        printf >&2 "ERROR: Failed to add HAProxy config file.\n" && return 1
    }

}



while [[ $1 =~ ^- ]]; do
    case $1 in
        -p|--node-port*) 
            if [[ -n $2 ]]; then
                printf "Setting NodePort: %s\n" "$2"
                NODE_PORT=$2
                shift;
            else
                printf >&2 "No NodePort was specified.\n" && exit 1
            fi
            shift;
            ;;
        -h|--help)
            cat <<- EOF
			Usage: ${0##*/} [OPTIONS]
			
			This script installs and configures HAProxy for load balancing a Kubernetes cluster. 
			It detects the operating system (Debian or RedHat-based) and installs HAProxy accordingly. 
			It also sets up HAProxy to use worker nodes and a NodePort.
			
			Options:
			  -p, --node-port <VALUE>   Set the Kubernetes NodePort for HAProxy.
			  -h, --help                    Show this help message and exit.
			
			If the NodePort is not specified, the script will prompt for it during execution.
			
			Example:
			  ${0##*/} --node-port 30080
			EOF
            ;;
        *)
            printf "Unknown option: %s\nDiscarding.\n" "$1"
            shift;
            ;;
    esac
done


[[ -z $NODE_PORT ]] && read -r -p "No -p <NodePort> specified. Enter the NodePort of your cluster: " NODE_PORT
if [[ -z $NODE_PORT ]]; then
    cat <<- EOF
    No NodePort was specified.
    Run this script again with '-p <NodePort>' or enter the NodePort after running.  

    You need to specify the NodePort that was assigned to the Kubernetes cluster.

    Expose the deployment with '--type=NodePort' and then
    use 'kubectl get svc <deployment-name>' to see the NodePort.
    E.g.,:

        kubectl create deployment nginx-demo --image=nginx:stable
        kubectl scale deployment nginx-demo --replicas=2
        kubectl expose deployment nginx-demo --type=NodePort --port=80
        kubectl get svc nginx-demo

	EOF
    exit 1
fi

printf "Starting installation of HAProxy.\n"

OS_FAMILY=$(cat /etc/*release | grep -i "id_like" | awk -F= '{print $2}')
if [[ -z "$OS_FAMILY" ]]; then
    printf "Trying again to determine OS family.\n"
    {
        which apt && printf "OS_FAMILY: %s\n" "${OS_FAMILY:=debian}"; 
    } || {
        which dnf && printf "OS_FAMILY: %s\n" "${OS_FAMILY:=rhel}"; 
    }
fi

[[ -z "$OS_FAMILY" ]] && {
    printf "Failed to determine OS family (RHEL/Debian)!\n" && exit 1
}


if [[ ${OS_FAMILY,,} == *debian* ]]; then
    printf "Starting HAProxy installation for Debian-based systems.\n"
    debian-install-haproxy || {
        printf >&2 "There was a problem installing HAProxy.\n" && exit 1
    }
    printf "Successfully installed HAProxy.\n"
    printf "Check the configuration file at /etc/haproxy/haproxy.cfg to verify everything is correct.\n"
fi


if [[ ${OS_FAMILY,,} == *rhel* ]]; then
    printf "Starting HAProxy installation for RedHat-based systems.\n"
    rhel-install-haproxy || {
        printf >&2 "There was a problem installing HAProxy.\n" && exit 1
    }
    printf "Successfully installed HAProxy.\n"
    printf "Check the configuration file at /etc/haproxy/haproxy.cfg to verify everything is correct.\n"
fi



