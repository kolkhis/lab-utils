#!/bin/bash
# shellcheck disable=SC1090
# This script installs the Kubernetes tools kubelet, kubectl, and kubeadm.  
# containerd is also installed as the k8s container runtime.  
# The firewalld ports for k8s and Flannel CNI are opened.  

K8S_VERSION="1.32"

# TODO: Refactor to use these fns 
error() {
    printf >&2 "\033[31mERROR: %s\033[0m\n" "$*"
}

fatal() {
    printf >&2 "\033[31mERROR(fatal): %s\033[0m\n" "$*" && exit 1
}


# TODO: Test Debian install on a Debian-based system
# TODO: add error handling (debian)
NODE_IP=$(hostname -I | awk '{print $1}' | tr -d ' ')
OS_FAMILY=$(cat /etc/*release | grep -i "ID_LIKE" | awk -F= '{print $2}')

if [[ -z "$OS_FAMILY" ]]; then
    printf "Trying again to determine OS family.\n"
    {
        which apt && printf "OS_FAMILY: %s\n" "${OS_FAMILY:=debian}"; 
    } || {
        which dnf && printf "OS_FAMILY: %s\n" "${OS_FAMILY:=rhel}"; 
    }
fi

: "${OS_FAMILY:?"Unable to verify the OS family!"}"



# Disable swap 
sudo swapoff -a || {
    printf >&2 "Couldn't disable SWAP!\n" && exit 1
}
sudo sed -i '/swap/s/^/#/' /etc/fstab || {
    printf >&2 "Unable to comment out swap entries from /etc/fstab!\n"
}

if [[ $OS_FAMILY == *rhel* ]]; then
    printf "Performing RHEL-based installation.\n"

    # set selinux to permissive
    if [[ $(getenforce | tr '[:upper:]' '[:lower:]') == enforcing ]]; then
        {
            sudo setenforce 0
            sudo sed -i -E 's/^(SELINUX=)enforcing$/\1permissive/' /etc/selinux/config
        } || {
            printf >&2 "Couldn't set SELinux enforcement mode to permissive!\n" && exit 1
        }
    fi

    # install deps
    sudo dnf install -y yum-utils device-mapper-persistent-data lvm2 || {
        printf >&2 "Error installing dependencies!\n" && exit 1
    }

    # download gpg key
    printf "Downloading RPM repository GPG key...\n"
    sudo curl -fsSL -o /etc/pki/rpm-gpg/RPM-GPG-KEY-kubernetes \
        https://pkgs.k8s.io/core:/stable:/v${K8S_VERSION}/rpm/repodata/repomd.xml.key || {
        printf >&2 "Error while downloading GPG key!\n" && exit 1
    }

    sudo chmod 644 /etc/pki/rpm-gpg/RPM-GPG-KEY-kubernetes || {
        printf >&2 "Error changing GPG key permissions!\n" && exit 1
    }

    sudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-kubernetes || {
        printf >&2 "Failed to import the rpm Kubernetes GPG key!\n" && exit 1
    }

    printf "Adding Kubernetes repository to /etc/yum.repos.d/kubernetes.repo ...\n"
    {
	    cat <<- EOF | sudo tee /etc/yum.repos.d/kubernetes.repo > /dev/null
		[kubernetes]
		name=Kubernetes
		baseurl=https://pkgs.k8s.io/core:/stable:/v${K8S_VERSION}/rpm
		enabled=1
		gpgcheck=1
		repo_gpgcheck=0
		gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-kubernetes
		EOF
    } || {
        printf >&2 "Failed to add repository in /etc/yum.repos.d/kubernetes.repo!\n" && exit 1
    }

    printf "Repository added.\n"

    printf "Installing kubelet, kubectl, and kubeadm...\n"

    sudo dnf install kubelet kubectl kubeadm -y || {
        printf >&2 "There was an problem installing kubelet, kubectl, and kubeadm!\n" && exit 1
    }

    sudo systemctl enable --now kubelet || {
        printf >&2 "There was a problem enabling the kubelet service!\n" && exit 1
    }

    kubeadm version || {
        printf >&2 "Kubeadm could not be verified!\n" && exit 1
    }

    kubectl version --client || {
        printf >&2 "Kubectl could not be verified!\n" && exit 1
    }

    kubelet --version || {
        printf >&2 "Kubelet could not be verified!\n" && exit 1
    }
    

    ##################### Configuration ####################
    printf "Adding 'br_netfilter' and 'overlay' kernel modules.\n"
    {
		cat <<- 'EOF' | sudo tee /etc/modules-load.d/k8s.conf > /dev/null
		overlay
		br_netfilter
		EOF
    } || {
        printf >&2 "Unable to add 'overlay' and 'br_netfilter' to /etc/modules-load.d/k8s.conf!\n" && exit 1
    }

    sudo modprobe br_netfilter || {
        printf >&2 "modprobe: Unable to load the br_netfilter kernel module.\n"
    }

    sudo modprobe overlay || {
        printf >&2 "modprobe: Unable to load the br_netfilter kernel module.\n"
    }

    printf "Configuring iptables network bridge and enabling IP forwarding.\n"
    {
		cat <<- 'EOF' | sudo tee /etc/sysctl.d/k8s.conf > /dev/null
		net.bridge.bridge-nf-call-ip6tables = 1
		net.bridge.bridge-nf-call-iptables  = 1
		net.ipv4.ip_forward	                = 1
		EOF
    } || {
        printf >&2 "Error adding iptables configuration to /etc/sysctl.d/k8s.conf!\n" && exit 1 
    }

    printf "Reloading kernel parameters.\n"
    if ! sudo sysctl --system; then
        printf >&2 "Unable to reload kernel modules!\n" && exit 1
    fi

    # add bash completion for kubectl
    if rpm -qa | grep -i 'bash-completion'; then
        printf "Bash-completion is on the system. Adding completion for Kubernetes.\n"
        source <(kubectl completion bash)
        { 
            printf 'source <(kubectl completion bash)\n';
            printf 'alias k=kubectl\n';
            printf 'complete -o default -F __start_kubectl k\n';
        } >> ~/.bashrc
        printf "Added completion for Kubernetes.\n"
    fi

    # Open necessary ports in firewalld
    if [[ $(sudo systemctl is-active firewalld) == 'active' ]]; then
        printf "Firewalld is active.\n"
        printf "Opening necessary ports in firewalld.\n"
        case $HOSTNAME in 
            *control*|*master*)
                printf "Adding ports for control node %s\n" "$(hostname)"
                {
                    sudo firewall-cmd --permanent --add-port={179,6443,2379,2380,10250,10251,10252,10257,10259}/tcp
                    sudo firewall-cmd --permanent --add-port=4789/udp
                    sudo firewall-cmd --add-masquerade --permanent
                    # cilium
                    sudo firewall-cmd --permanent --add-port=4240/tcp
                    sudo firewall-cmd --permanent --add-port={8472,6081}/udp
                    sudo firewall-cmd --reload
                } || {
                    printf >&2 "Problem adding ports to firewalld on control node!\n" && exit 1
                }
                ;;
            *worker*)
                printf "Adding ports for worker node %s\n" "$(hostname)"
                {
                    sudo firewall-cmd --permanent --add-port={179,10250,30000-32767}/tcp
                    sudo firewall-cmd --permanent --add-port=4789/udp
                    sudo firewall-cmd --add-masquerade --permanent
                    # cilium
                    sudo firewall-cmd --permanent --add-port=4240/tcp
                    sudo firewall-cmd --permanent --add-port={8472,6081}/udp
                    sudo firewall-cmd --reload
                } || {
                    printf >&2 "Problem opening ports on worker node!\n" && exit 1
                }
                ;;
            *)
                printf "Couldn't determine if the current node is a worker or control node.\n"
                printf "Control node hostnames must contain 'control' or 'master'.\n"
                printf "Worker node hostnames must contain the word 'worker'.\n"
                exit 1;
                ;;
        esac
    else printf "Firewalld is not active. Continuing installation.\n"
    fi

    printf "Adding the Docker-ce repository for containerd.\n"
    sudo curl -fsSL -o /etc/yum.repos.d/docker-ce.repo \
        https://download.docker.com/linux/rhel/docker-ce.repo || {
        printf >&2 "There was a problem when downloading the Docker repository!\n" && exit 1
    }

    sudo dnf install containerd -y || {
        printf "Unable to install containerd!\n" && exit 1
    }

    printf "Configuring containerd...\n"
    containerd config default | sudo tee /etc/containerd/config.toml > /dev/null 2>&1 || {
        printf >&2 "Error while setting up default configuration for containerd!\n" && exit 1
    }

    # Configure containerd to use systemdcgroup
    {
        sudo sed -i \
            -e '/SystemdCgroup/s/false/true/' \
            /etc/containerd/config.toml
    } || {
        printf >&2 "Error when enabling systemd_cgroup in /etc/containerd/config.toml\n" && exit 1
    }

    printf "Restarting and enabling containerd...\n"
    sudo systemctl restart containerd || {
        printf >&2 "There was a problem restarting containerd.\n" && exit 1
    }

    sudo systemctl enable --now containerd || {
        printf >&2 "There was a problem enabling containerd.\n" && exit 1
    }

    sudo systemctl status --no-pager containerd || {
        printf >&2 "Could not verify the status of containerd!\n" && exit 1
    }

    printf "Successfully installed Kubernetes tools on node %s at %s!\n" "${HOSTNAME}" "${NODE_IP}"

fi

# TODO(deb): Debian install is untested.
if [[ $OS_FAMILY == *debian* ]]; then
    printf "Using debian installation.\n"
    
    {
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
    } || {
        printf >&2 "Failed to install dependencies!\n" && exit 1
    }

    printf "Adding k8s apt GPG key...\n"
    {
        sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v${K8S_VERSION}/dev/Release.key | 
            sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    } || {
        printf >&2 "Failed to download k8s apt GPG key to /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n" && exit 1
    }

    # allow unprivileged apt programs to read it
    sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg || {
        printf >&2 "Failed to change permissions (644) for /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n" && exit 1
    }

    printf "Adding the k8s apt repository.\n"

    {
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pks.k8s.io/core:/stable:/v${K8S_VERSION}/deb/ /" |
            sudo tee /etc/apt/sources.list.d/kubernetes.list
    } || {
        printf >&2 "Failed to add k8s apt repository.\n" && exit 1
    }

    printf "Installing kubelet, kubeadm, and kubectl.\n"
    sudo apt-get install kubelet kubeadm kubectl -y || {
        printf >&2 "Failed to install kubernetes tools (kubelet, kubeadm, kubectl). Exiting.\n" && exit 1
    }

    printf "Attempting to add the 'br_netfilter' kernel module.\n"
	cat <<- 'EOF' | sudo tee /etc/modules-load.d/k8s.conf > /dev/null
		overlay
		br_netfilter
	EOF

    {
        sudo modprobe overlay
        sudo modprobe br_netfilter
    } || {
        printf >&2 "Failed to load kernel modules 'overlay' and 'br_netfilter'! Exiting.\n" && exit 1
    }

    printf "Attempting to configure network bridge for iptables...\n"
    {
    cat <<- 'EOF' | sudo tee /etc/sysctl.d/k8s.conf > /dev/null
	net.bridge.bridge-nf-call-ip6tables = 1
	net.bridge.bridge-nf-call-iptables  = 1
	net.ipv4.ip_forward                 = 1
	EOF
    } || {
        printf >&2 "Failed to add IP Forwarding and bridge rules to iptables!\n" && exit 1
    }

    sudo sysctl --system || { printf >&2 "Failed to reload sysctl.\n" && exit 1; }

    kubeadm version || {
        printf >&2 "Kubeadm could not be verified!\n" && exit 1
    }

    kubectl version --client || {
        printf >&2 "Kubectl could not be verified!\n" && exit 1
    }

    kubelet --version || {
        printf >&2 "Kubelet could not be verified!\n" && exit 1
    }
    

    # enable kubectl bash completion 
    if dpkg -l | grep -qi 'bash-completion'; then
        {
            source <(kubectl completion bash)
            { 
                printf 'source <(kubectl completion bash)\n';
                printf 'alias k=kubectl\n';
                printf 'complete -o default -F __start_kubectl k\n';
            } >> ~/.bashrc
        } || {
            printf >&2 "Failed to set up bash completion.\n"
        }
    fi
fi

