#!/bin/bash
declare BUILD_DIR="$HOME/book-lac"
declare BOOK_LINK
declare REMOTE="upstream"
declare BRANCH="main"

err() {
    [[ $# -gt 0 ]] && {
        local ERR="[ \033[31m ERROR \033[0m ]: "
        printf >&2 "%s%s\n" "${ERR}" "$@"
    }
}

pull-upstream(){
    cd "${BUILD_DIR}" || {
        err "Failed to change directory to ${BUILD_DIR}!" && return 1
    }
    if ! { [[ -n $REMOTE ]] && git pull "${REMOTE}" "${BRANCH}"; }; then
        err "Failed to pull from remote repository: ${REMOTE}! Is the git remote set up?" && return 1
    fi
    return 0
}

while [[ -n $1 ]]; do
    case $1 in
        -p|--pull)
            if [[ -n $2 ]] && [[ ! $2 =~ ^- ]]; then
                shift;
                printf "Pulling from remote: %s\n" "$1"
                REMOTE=$1
            fi
            printf "Pulling changes from upstream\n"
            pull-upstream || {
                printf "Failed to update repo from upstream. Exiting.\n" && exit 1
            }
            shift;
            ;;

        -d|--directory)
            if [[ -n $2 ]] && [[ ! $2 =~ ^- ]]; then
                printf "Using %s as build directory.\n" "$2"
                shift;
                BUILD_DIR=$1
            else
                err "The -d option was given but no directory was specified. Using default (~/book-lac)."
            fi
            shift;
            ;;

        -b|--branch)
            if [[ -n $2 ]] && [[ ! $2 =~ ^- ]]; then
                printf "Using %s as the branch.\n" "${BRANCH}"
                shift;
                BRANCH=$1
            fi
            shift;
            ;;
        *)
            printf "Unknown option. Discarding.\n"
            shift;
            ;;
    esac
done


ACTIVE=$(sudo systemctl is-active apache2)
if [[ ${ACTIVE,,} != 'active' ]]; then
    err "Apache WebServer is not active!"
    exit 1
fi

build() {
    { [[ -d "${BUILD_DIR}" ]] && cd "${BUILD_DIR}"; } || {
        err "No ${BUILD_DIR} directory!" && return 1
    }

    { [[ -f ~/.cargo/bin/mdbook ]] && ~/.cargo/bin/mdbook build -d /var/www/html; } || {
        err "Failed to build book using mdbook!" && return 1
    }
}

if ! build; then
    err "Failed to build book.\n" && exit 1
fi

BOOK_LINK="http://$(hostname -I | awk '{print $1}' | tr -d ' ')"
printf "Run the following command to verify:\ncurl %s\n" "${BOOK_LINK}"
printf "Or, visit the following link: %s\n" "${BOOK_LINK}"

