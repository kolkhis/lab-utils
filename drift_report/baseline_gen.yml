---
- name: Generate a baseline for configuration files to be used on a good system
  hosts: ubuntu_control # localhost
  gather_facts: true
  tasks:

    - name: Gather stats of critical system files
      ansible.builtin.stat:
        path: "{{ item }}"
        checksum_algorithm: sha256
      loop:
        - /etc/passwd
        - /etc/ssh/sshd_config
        - /etc/hosts
        - /etc/group
      register: file_stats

    - name: Set checksums into facts
      ansible.builtin.set_fact:
        file_checksums: |
          {% for item in file_stats.results %}
          {{ item.stat.path }}: {{ item.stat.checksum }}
          {% endfor %}

    # - name: Check active services
    #   ansible.builtin.shell:
    #     cmd: "systemctl is-active {{ item }}"
    #   with_items:
    #     - sshd
    #     - firewalld
    #   register: services_status
    #   failed_when: false # Don't fail if return code is > 0.

    - name: Check active services
      ansible.builtin.systemd:
        name: "{{ item }}"
      loop:
        - sshd
        - firewalld
      register: services_status
      failed_when: false # Don't fail if return code is > 0.

    - name: Debug the services
      ansible.builtin.debug:
        msg:
          - "Services: {{ services_status }}"

    - name: Set and format the service states
      ansible.builtin.set_fact:
        service_states: |
          {% for item in services_status.results %}
          {{ item.item }}: {{ item.status.ActiveState }}
          {% endfor %}

    - name: Get a list of installed packages
      ansible.builtin.shell:
        cmd: "rpm -qa --qf '%{NAME}%{VERSION}\n'" # Strip the unnecessary info
      register: installed_packages
      when: ansible_os_family == 'RedHat'
      changed_when: false

    - name: Get a list of installed packages with dpkg
      ansible.builtin.shell:
        cmd: "dpkg-query --show -f='${Package}${Version}\n'" # Strip the unnecessary info
      register: installed_packages
      when: ansible_os_family == 'Debian'
      changed_when: false

    - name: Save baseline to a yaml file
      ansible.builtin.copy:
        dest: /var/tmp/baseline.yaml
        content: |
          files:
          {% for file in file_checksums.split('\n') %}
            {{ file }}
          {% endfor %}

          services:
          {% for service in service_states.split('\n') %}
            {{ service }}
          {% endfor %}

          installed_packages:
          {% for package in installed_packages.stdout.split('\n') %}
            - {{ package }}
          {% endfor %}
        mode: '0755'

    - name: Set fact for control node IP
      ansible.builtin.set_fact:
        ubuntu_control_ip: "{{ ansible_host }}"

    - name: Pull down baseline file to local machine
      ansible.builtin.fetch:
        src: /var/tmp/baseline.yaml
        dest: /root/ansible_madness/baseline

    - name: Move the baseline report locally to /var/tmp
      delegate_to: localhost
      ansible.builtin.copy:
        remote_src: true
        src: "/root/ansible_madness/baseline/{{ ubuntu_control_ip }}/var/tmp/baseline.yaml"
        dest: /var/tmp/baseline.yaml
        mode: '0755'
